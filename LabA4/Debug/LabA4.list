
LabA4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000424  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004e4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080004ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000020  0800050c  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000003c  0800050c  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000069e  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001d3  00000000  00000000  000206e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000070  00000000  00000000  000208c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00020930  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000003b3  00000000  00000000  00020978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000312  00000000  00000000  00020d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002103d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000000c4  00000000  00000000  000210bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080004cc 	.word	0x080004cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080004cc 	.word	0x080004cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8000224:	f000 f894 	bl	8000350 <SystemCoreClockUpdate>

	//Clock to giop
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000228:	4b13      	ldr	r3, [pc, #76]	; (8000278 <main+0x58>)
 800022a:	4a13      	ldr	r2, [pc, #76]	; (8000278 <main+0x58>)
 800022c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c

	// Mux PA8 to AF0 (USART1TX) and set to Alt. function
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~(0xf));
 8000234:	23a0      	movs	r3, #160	; 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	22a0      	movs	r2, #160	; 0xa0
 800023a:	05d2      	lsls	r2, r2, #23
 800023c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800023e:	210f      	movs	r1, #15
 8000240:	438a      	bics	r2, r1
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODE8)) | (GPIO_MODER_MODE8_1);
 8000244:	23a0      	movs	r3, #160	; 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	22a0      	movs	r2, #160	; 0xa0
 800024a:	05d2      	lsls	r2, r2, #23
 800024c:	6812      	ldr	r2, [r2, #0]
 800024e:	490b      	ldr	r1, [pc, #44]	; (800027c <main+0x5c>)
 8000250:	400a      	ands	r2, r1
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	0289      	lsls	r1, r1, #10
 8000256:	430a      	orrs	r2, r1
 8000258:	601a      	str	r2, [r3, #0]

	/* (1) Clear the MCO selection bits */
	/* (2)Select system clock/1 to be output on the MCO without prescaler */
	RCC->CFGR &= (uint32_t) RCC_CFGR_MCOSEL; /* (1) */
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <main+0x58>)
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <main+0x58>)
 800025e:	68d1      	ldr	r1, [r2, #12]
 8000260:	22f0      	movs	r2, #240	; 0xf0
 8000262:	0512      	lsls	r2, r2, #20
 8000264:	400a      	ands	r2, r1
 8000266:	60da      	str	r2, [r3, #12]
	RCC->CFGR |= RCC_CFGR_MCO_SYSCLK | RCC_CFGR_MCO_PRE_1; /* (2) */
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <main+0x58>)
 800026a:	4a03      	ldr	r2, [pc, #12]	; (8000278 <main+0x58>)
 800026c:	68d2      	ldr	r2, [r2, #12]
 800026e:	2180      	movs	r1, #128	; 0x80
 8000270:	0449      	lsls	r1, r1, #17
 8000272:	430a      	orrs	r2, r1
 8000274:	60da      	str	r2, [r3, #12]

  /* TODO - Add your application code here */
  while (1)
 8000276:	e7fe      	b.n	8000276 <main+0x56>
 8000278:	40021000 	.word	0x40021000
 800027c:	fffcffff 	.word	0xfffcffff

08000280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000282:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000286:	e003      	b.n	8000290 <LoopCopyDataInit>

08000288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800028a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800028c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800028e:	3104      	adds	r1, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000298:	d3f6      	bcc.n	8000288 <CopyDataInit>
  ldr  r2, =_sbss
 800029a:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <LoopForever+0x12>)
  b  LoopFillZerobss
 800029c:	e002      	b.n	80002a4 <LoopFillZerobss>

0800029e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800029e:	2300      	movs	r3, #0
  str  r3, [r2]
 80002a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a2:	3204      	adds	r2, #4

080002a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <LoopForever+0x16>)
  cmp  r2, r3
 80002a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002a8:	d3f9      	bcc.n	800029e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002aa:	f000 f813 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ae:	f000 f8e9 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002b2:	f7ff ffb5 	bl	8000220 <main>

080002b6 <LoopForever>:

LoopForever:
    b LoopForever
 80002b6:	e7fe      	b.n	80002b6 <LoopForever>
  ldr   r0, =_estack
 80002b8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80002bc:	080004ec 	.word	0x080004ec
  ldr  r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002c4:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80002c8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80002cc:	2000003c 	.word	0x2000003c

080002d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002d0:	e7fe      	b.n	80002d0 <ADC1_COMP_IRQHandler>
	...

080002d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <SystemInit+0x64>)
 80002da:	4a17      	ldr	r2, [pc, #92]	; (8000338 <SystemInit+0x64>)
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	0049      	lsls	r1, r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <SystemInit+0x64>)
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <SystemInit+0x64>)
 80002ea:	68d2      	ldr	r2, [r2, #12]
 80002ec:	4913      	ldr	r1, [pc, #76]	; (800033c <SystemInit+0x68>)
 80002ee:	400a      	ands	r2, r1
 80002f0:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 80002f2:	4b11      	ldr	r3, [pc, #68]	; (8000338 <SystemInit+0x64>)
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <SystemInit+0x64>)
 80002f6:	6812      	ldr	r2, [r2, #0]
 80002f8:	4911      	ldr	r1, [pc, #68]	; (8000340 <SystemInit+0x6c>)
 80002fa:	400a      	ands	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <SystemInit+0x64>)
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <SystemInit+0x64>)
 8000302:	6892      	ldr	r2, [r2, #8]
 8000304:	2101      	movs	r1, #1
 8000306:	438a      	bics	r2, r1
 8000308:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <SystemInit+0x64>)
 800030c:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <SystemInit+0x64>)
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <SystemInit+0x70>)
 8000312:	400a      	ands	r2, r1
 8000314:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <SystemInit+0x64>)
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <SystemInit+0x64>)
 800031a:	68d2      	ldr	r2, [r2, #12]
 800031c:	490a      	ldr	r1, [pc, #40]	; (8000348 <SystemInit+0x74>)
 800031e:	400a      	ands	r2, r1
 8000320:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <SystemInit+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <SystemInit+0x78>)
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	0512      	lsls	r2, r2, #20
 800032e:	609a      	str	r2, [r3, #8]
#endif
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	40021000 	.word	0x40021000
 800033c:	88ff400c 	.word	0x88ff400c
 8000340:	fef6fff6 	.word	0xfef6fff6
 8000344:	fffbffff 	.word	0xfffbffff
 8000348:	ff02ffff 	.word	0xff02ffff
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	2300      	movs	r3, #0
 8000368:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800036a:	4b40      	ldr	r3, [pc, #256]	; (800046c <SystemCoreClockUpdate+0x11c>)
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	220c      	movs	r2, #12
 8000370:	4013      	ands	r3, r2
 8000372:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	2b04      	cmp	r3, #4
 8000378:	d015      	beq.n	80003a6 <SystemCoreClockUpdate+0x56>
 800037a:	d802      	bhi.n	8000382 <SystemCoreClockUpdate+0x32>
 800037c:	2b00      	cmp	r3, #0
 800037e:	d005      	beq.n	800038c <SystemCoreClockUpdate+0x3c>
 8000380:	e050      	b.n	8000424 <SystemCoreClockUpdate+0xd4>
 8000382:	2b08      	cmp	r3, #8
 8000384:	d013      	beq.n	80003ae <SystemCoreClockUpdate+0x5e>
 8000386:	2b0c      	cmp	r3, #12
 8000388:	d015      	beq.n	80003b6 <SystemCoreClockUpdate+0x66>
 800038a:	e04b      	b.n	8000424 <SystemCoreClockUpdate+0xd4>
  {
    case 0x00:  /* MSI used as system clock */
      SystemCoreClock = ((1 <<((RCC->ICSCR & RCC_ICSCR_MSIRANGE)>>13 ))* 64000);
 800038c:	4b37      	ldr	r3, [pc, #220]	; (800046c <SystemCoreClockUpdate+0x11c>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	0b5b      	lsrs	r3, r3, #13
 8000392:	2207      	movs	r2, #7
 8000394:	4013      	ands	r3, r2
 8000396:	22fa      	movs	r2, #250	; 0xfa
 8000398:	0212      	lsls	r2, r2, #8
 800039a:	409a      	lsls	r2, r3
 800039c:	0013      	movs	r3, r2
 800039e:	001a      	movs	r2, r3
 80003a0:	4b33      	ldr	r3, [pc, #204]	; (8000470 <SystemCoreClockUpdate+0x120>)
 80003a2:	601a      	str	r2, [r3, #0]
      break;
 80003a4:	e04e      	b.n	8000444 <SystemCoreClockUpdate+0xf4>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80003a6:	4b32      	ldr	r3, [pc, #200]	; (8000470 <SystemCoreClockUpdate+0x120>)
 80003a8:	4a32      	ldr	r2, [pc, #200]	; (8000474 <SystemCoreClockUpdate+0x124>)
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	e04a      	b.n	8000444 <SystemCoreClockUpdate+0xf4>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80003ae:	4b30      	ldr	r3, [pc, #192]	; (8000470 <SystemCoreClockUpdate+0x120>)
 80003b0:	4a31      	ldr	r2, [pc, #196]	; (8000478 <SystemCoreClockUpdate+0x128>)
 80003b2:	601a      	str	r2, [r3, #0]
      break;
 80003b4:	e046      	b.n	8000444 <SystemCoreClockUpdate+0xf4>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80003b6:	4b2d      	ldr	r3, [pc, #180]	; (800046c <SystemCoreClockUpdate+0x11c>)
 80003b8:	68da      	ldr	r2, [r3, #12]
 80003ba:	23f0      	movs	r3, #240	; 0xf0
 80003bc:	039b      	lsls	r3, r3, #14
 80003be:	4013      	ands	r3, r2
 80003c0:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80003c2:	4b2a      	ldr	r3, [pc, #168]	; (800046c <SystemCoreClockUpdate+0x11c>)
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	23c0      	movs	r3, #192	; 0xc0
 80003c8:	041b      	lsls	r3, r3, #16
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	0c9b      	lsrs	r3, r3, #18
 80003d2:	4a2a      	ldr	r2, [pc, #168]	; (800047c <SystemCoreClockUpdate+0x12c>)
 80003d4:	5cd3      	ldrb	r3, [r2, r3]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	0d9b      	lsrs	r3, r3, #22
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <SystemCoreClockUpdate+0x11c>)
 80003e4:	68da      	ldr	r2, [r3, #12]
 80003e6:	2380      	movs	r3, #128	; 0x80
 80003e8:	025b      	lsls	r3, r3, #9
 80003ea:	4013      	ands	r3, r2
 80003ec:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <SystemCoreClockUpdate+0xbc>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	4a1f      	ldr	r2, [pc, #124]	; (8000474 <SystemCoreClockUpdate+0x124>)
 80003f8:	4353      	muls	r3, r2
 80003fa:	68f9      	ldr	r1, [r7, #12]
 80003fc:	0018      	movs	r0, r3
 80003fe:	f7ff fe83 	bl	8000108 <__udivsi3>
 8000402:	0003      	movs	r3, r0
 8000404:	001a      	movs	r2, r3
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <SystemCoreClockUpdate+0x120>)
 8000408:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800040a:	e01b      	b.n	8000444 <SystemCoreClockUpdate+0xf4>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	4a1a      	ldr	r2, [pc, #104]	; (8000478 <SystemCoreClockUpdate+0x128>)
 8000410:	4353      	muls	r3, r2
 8000412:	68f9      	ldr	r1, [r7, #12]
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff fe77 	bl	8000108 <__udivsi3>
 800041a:	0003      	movs	r3, r0
 800041c:	001a      	movs	r2, r3
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <SystemCoreClockUpdate+0x120>)
 8000420:	601a      	str	r2, [r3, #0]
      break;
 8000422:	e00f      	b.n	8000444 <SystemCoreClockUpdate+0xf4>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <SystemCoreClockUpdate+0x11c>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	0b5b      	lsrs	r3, r3, #13
 800042a:	2207      	movs	r2, #7
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0212      	lsls	r2, r2, #8
 8000438:	409a      	lsls	r2, r3
 800043a:	0013      	movs	r3, r2
 800043c:	001a      	movs	r2, r3
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <SystemCoreClockUpdate+0x120>)
 8000440:	601a      	str	r2, [r3, #0]
      break;
 8000442:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <SystemCoreClockUpdate+0x11c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	220f      	movs	r2, #15
 800044c:	4013      	ands	r3, r2
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <SystemCoreClockUpdate+0x130>)
 8000450:	5cd3      	ldrb	r3, [r2, r3]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <SystemCoreClockUpdate+0x120>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	40da      	lsrs	r2, r3
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SystemCoreClockUpdate+0x120>)
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b006      	add	sp, #24
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000
 8000470:	20000000 	.word	0x20000000
 8000474:	00f42400 	.word	0x00f42400
 8000478:	007a1200 	.word	0x007a1200
 800047c:	20000014 	.word	0x20000014
 8000480:	20000004 	.word	0x20000004

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2600      	movs	r6, #0
 8000488:	4d0c      	ldr	r5, [pc, #48]	; (80004bc <__libc_init_array+0x38>)
 800048a:	4c0d      	ldr	r4, [pc, #52]	; (80004c0 <__libc_init_array+0x3c>)
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	2600      	movs	r6, #0
 8000496:	f000 f819 	bl	80004cc <_init>
 800049a:	4d0a      	ldr	r5, [pc, #40]	; (80004c4 <__libc_init_array+0x40>)
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <__libc_init_array+0x44>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	00b3      	lsls	r3, r6, #2
 80004aa:	58eb      	ldr	r3, [r5, r3]
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	00b3      	lsls	r3, r6, #2
 80004b4:	58eb      	ldr	r3, [r5, r3]
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
