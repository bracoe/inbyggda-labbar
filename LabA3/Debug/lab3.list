
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080006b8  080006b8  000106b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  080006c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000020  080006e0  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000003c  080006e0  0002003c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .debug_info   000010b5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000032d  00000000  00000000  000210fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000088  00000000  00000000  00021430  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000214b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000049e  00000000  00000000  00021518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000078e  00000000  00000000  000219b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00022144  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000164  00000000  00000000  000221c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00022324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800067c 	.word	0x0800067c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	0800067c 	.word	0x0800067c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <uart_rx>:
/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

uint8_t uart_rx(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(!(USART1->ISR & USART_ISR_RXNE)); // wait for data
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <uart_rx+0x20>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	2220      	movs	r2, #32
 8000240:	4013      	ands	r3, r2
 8000242:	d0fa      	beq.n	800023a <uart_rx+0x6>
	return (char)(USART1->RDR); // read
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <uart_rx+0x20>)
 8000246:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000248:	b29b      	uxth	r3, r3
 800024a:	b2db      	uxtb	r3, r3
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40013800 	.word	0x40013800

08000258 <uart_tx>:

void uart_tx(char txdata){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	0002      	movs	r2, r0
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	701a      	strb	r2, [r3, #0]
	while(!(USART1->ISR & USART_ISR_TXE)); // wait
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <uart_tx+0x2c>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	4013      	ands	r3, r2
 800026e:	d0fa      	beq.n	8000266 <uart_tx+0xe>
	USART1->TDR = txdata; // send
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <uart_tx+0x2c>)
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b29b      	uxth	r3, r3
 8000278:	8513      	strh	r3, [r2, #40]	; 0x28
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40013800 	.word	0x40013800

08000288 <send_uart>:

void send_uart(char *buffer){
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]

	char sent_char = buffer[0];
 8000290:	230f      	movs	r3, #15
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	7812      	ldrb	r2, [r2, #0]
 8000298:	701a      	strb	r2, [r3, #0]
	int i = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60bb      	str	r3, [r7, #8]
	while(sent_char != '\0'){
 800029e:	e00f      	b.n	80002c0 <send_uart+0x38>
		sent_char = buffer[i];
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	18d2      	adds	r2, r2, r3
 80002a6:	230f      	movs	r3, #15
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	7812      	ldrb	r2, [r2, #0]
 80002ac:	701a      	strb	r2, [r3, #0]
		uart_tx(sent_char);
 80002ae:	230f      	movs	r3, #15
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffcf 	bl	8000258 <uart_tx>
		i++;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	3301      	adds	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
	while(sent_char != '\0'){
 80002c0:	230f      	movs	r3, #15
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1ea      	bne.n	80002a0 <send_uart+0x18>
	}
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b004      	add	sp, #16
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b095      	sub	sp, #84	; 0x54
 80002d8:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80002da:	f000 f909 	bl	80004f0 <SystemCoreClockUpdate>

	// Enable peripheral clock for USART1, APB2
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80002de:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <main+0x124>)
 80002e0:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <main+0x124>)
 80002e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80002e4:	2180      	movs	r1, #128	; 0x80
 80002e6:	01c9      	lsls	r1, r1, #7
 80002e8:	430a      	orrs	r2, r1
 80002ea:	635a      	str	r2, [r3, #52]	; 0x34

	// ...and for GPIOB
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 80002ec:	4b42      	ldr	r3, [pc, #264]	; (80003f8 <main+0x124>)
 80002ee:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <main+0x124>)
 80002f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80002f2:	2102      	movs	r1, #2
 80002f4:	430a      	orrs	r2, r1
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// Mux PA6 to AF0 (USART1TX) and set to Alt. function
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~(0xf000000));
 80002f8:	4b40      	ldr	r3, [pc, #256]	; (80003fc <main+0x128>)
 80002fa:	4a40      	ldr	r2, [pc, #256]	; (80003fc <main+0x128>)
 80002fc:	6a12      	ldr	r2, [r2, #32]
 80002fe:	4940      	ldr	r1, [pc, #256]	; (8000400 <main+0x12c>)
 8000300:	400a      	ands	r2, r1
 8000302:	621a      	str	r2, [r3, #32]
	GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODE6)) | (GPIO_MODER_MODE6_1);
 8000304:	4b3d      	ldr	r3, [pc, #244]	; (80003fc <main+0x128>)
 8000306:	4a3d      	ldr	r2, [pc, #244]	; (80003fc <main+0x128>)
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	493e      	ldr	r1, [pc, #248]	; (8000404 <main+0x130>)
 800030c:	400a      	ands	r2, r1
 800030e:	2180      	movs	r1, #128	; 0x80
 8000310:	0189      	lsls	r1, r1, #6
 8000312:	430a      	orrs	r2, r1
 8000314:	601a      	str	r2, [r3, #0]

	// Mux PA7 to AF0 (USART1RX) and set to Alt. function
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~(0xf0000000));
 8000316:	4b39      	ldr	r3, [pc, #228]	; (80003fc <main+0x128>)
 8000318:	4a38      	ldr	r2, [pc, #224]	; (80003fc <main+0x128>)
 800031a:	6a12      	ldr	r2, [r2, #32]
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	0912      	lsrs	r2, r2, #4
 8000320:	621a      	str	r2, [r3, #32]
	GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODE7)) | (GPIO_MODER_MODE7_1);
 8000322:	4b36      	ldr	r3, [pc, #216]	; (80003fc <main+0x128>)
 8000324:	4a35      	ldr	r2, [pc, #212]	; (80003fc <main+0x128>)
 8000326:	6812      	ldr	r2, [r2, #0]
 8000328:	4937      	ldr	r1, [pc, #220]	; (8000408 <main+0x134>)
 800032a:	400a      	ands	r2, r1
 800032c:	2180      	movs	r1, #128	; 0x80
 800032e:	0209      	lsls	r1, r1, #8
 8000330:	430a      	orrs	r2, r1
 8000332:	601a      	str	r2, [r3, #0]

	// Baud rate 9600
	USART1->BRR = SystemCoreClock / 9600;
 8000334:	4c35      	ldr	r4, [pc, #212]	; (800040c <main+0x138>)
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <main+0x13c>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	2396      	movs	r3, #150	; 0x96
 800033c:	0199      	lsls	r1, r3, #6
 800033e:	0010      	movs	r0, r2
 8000340:	f7ff feec 	bl	800011c <__udivsi3>
 8000344:	0003      	movs	r3, r0
 8000346:	60e3      	str	r3, [r4, #12]

	// Enable, no parity, 8 data bits, etc
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000348:	4b30      	ldr	r3, [pc, #192]	; (800040c <main+0x138>)
 800034a:	4a30      	ldr	r2, [pc, #192]	; (800040c <main+0x138>)
 800034c:	6812      	ldr	r2, [r2, #0]
 800034e:	210d      	movs	r1, #13
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]

	char buffer[32] = "";
 8000354:	2328      	movs	r3, #40	; 0x28
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	3304      	adds	r3, #4
 800035e:	221c      	movs	r2, #28
 8000360:	2100      	movs	r1, #0
 8000362:	0018      	movs	r0, r3
 8000364:	f000 f982 	bl	800066c <memset>

	char weclome[] = "\r\nWelcome!\r\n";
 8000368:	2318      	movs	r3, #24
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	4a29      	ldr	r2, [pc, #164]	; (8000414 <main+0x140>)
 800036e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000370:	c313      	stmia	r3!, {r0, r1, r4}
 8000372:	7812      	ldrb	r2, [r2, #0]
 8000374:	701a      	strb	r2, [r3, #0]

	send_uart(weclome);
 8000376:	2318      	movs	r3, #24
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	f7ff ff84 	bl	8000288 <send_uart>


	/* TODO - Add your application code here */
	while (1)
	{
		int last_input = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t character = 1;
 8000384:	234b      	movs	r3, #75	; 0x4b
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]

		while(character != '\r'){
 800038c:	e015      	b.n	80003ba <main+0xe6>
			character = uart_rx();
 800038e:	234b      	movs	r3, #75	; 0x4b
 8000390:	18fc      	adds	r4, r7, r3
 8000392:	f7ff ff4f 	bl	8000234 <uart_rx>
 8000396:	0003      	movs	r3, r0
 8000398:	7023      	strb	r3, [r4, #0]
			buffer[last_input] = character;
 800039a:	2328      	movs	r3, #40	; 0x28
 800039c:	18fa      	adds	r2, r7, r3
 800039e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003a0:	18d3      	adds	r3, r2, r3
 80003a2:	224b      	movs	r2, #75	; 0x4b
 80003a4:	18ba      	adds	r2, r7, r2
 80003a6:	7812      	ldrb	r2, [r2, #0]
 80003a8:	701a      	strb	r2, [r3, #0]

			last_input++;
 80003aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003ac:	3301      	adds	r3, #1
 80003ae:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(last_input > 31){
 80003b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003b2:	2b1f      	cmp	r3, #31
 80003b4:	dd01      	ble.n	80003ba <main+0xe6>
				last_input = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	64fb      	str	r3, [r7, #76]	; 0x4c
		while(character != '\r'){
 80003ba:	234b      	movs	r3, #75	; 0x4b
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b0d      	cmp	r3, #13
 80003c2:	d1e4      	bne.n	800038e <main+0xba>
			}
		}

		char hello_string[] = "hello!\r";
 80003c4:	2310      	movs	r3, #16
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	4a13      	ldr	r2, [pc, #76]	; (8000418 <main+0x144>)
 80003ca:	ca03      	ldmia	r2!, {r0, r1}
 80003cc:	c303      	stmia	r3!, {r0, r1}

		if(strcmp(buffer, hello_string) == 0){
 80003ce:	2310      	movs	r3, #16
 80003d0:	18fa      	adds	r2, r7, r3
 80003d2:	2328      	movs	r3, #40	; 0x28
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff fe95 	bl	8000108 <strcmp>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d1ce      	bne.n	8000380 <main+0xac>
			char output_buffer[] = "Good bye!";
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <main+0x148>)
 80003e6:	ca03      	ldmia	r2!, {r0, r1}
 80003e8:	c303      	stmia	r3!, {r0, r1}
 80003ea:	8812      	ldrh	r2, [r2, #0]
 80003ec:	801a      	strh	r2, [r3, #0]
			send_uart(output_buffer);
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	0018      	movs	r0, r3
 80003f2:	f7ff ff49 	bl	8000288 <send_uart>
	{
 80003f6:	e7c3      	b.n	8000380 <main+0xac>
 80003f8:	40021000 	.word	0x40021000
 80003fc:	50000400 	.word	0x50000400
 8000400:	f0ffffff 	.word	0xf0ffffff
 8000404:	ffffcfff 	.word	0xffffcfff
 8000408:	ffff3fff 	.word	0xffff3fff
 800040c:	40013800 	.word	0x40013800
 8000410:	20000000 	.word	0x20000000
 8000414:	08000694 	.word	0x08000694
 8000418:	080006a4 	.word	0x080006a4
 800041c:	080006ac 	.word	0x080006ac

08000420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000426:	e003      	b.n	8000430 <LoopCopyDataInit>

08000428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800042a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800042c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800042e:	3104      	adds	r1, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000430:	480b      	ldr	r0, [pc, #44]	; (8000460 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000438:	d3f6      	bcc.n	8000428 <CopyDataInit>
  ldr  r2, =_sbss
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <LoopForever+0x12>)
  b  LoopFillZerobss
 800043c:	e002      	b.n	8000444 <LoopFillZerobss>

0800043e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800043e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000440:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000442:	3204      	adds	r2, #4

08000444 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <LoopForever+0x16>)
  cmp  r2, r3
 8000446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000448:	d3f9      	bcc.n	800043e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800044a:	f000 f813 	bl	8000474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800044e:	f000 f8e9 	bl	8000624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000452:	f7ff ff3f 	bl	80002d4 <main>

08000456 <LoopForever>:

LoopForever:
    b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800045c:	080006c0 	.word	0x080006c0
  ldr  r0, =_sdata
 8000460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000464:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000468:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800046c:	2000003c 	.word	0x2000003c

08000470 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_COMP_IRQHandler>
	...

08000474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <SystemInit+0x64>)
 800047a:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <SystemInit+0x64>)
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	0049      	lsls	r1, r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <SystemInit+0x64>)
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <SystemInit+0x64>)
 800048a:	68d2      	ldr	r2, [r2, #12]
 800048c:	4913      	ldr	r1, [pc, #76]	; (80004dc <SystemInit+0x68>)
 800048e:	400a      	ands	r2, r1
 8000490:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <SystemInit+0x64>)
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <SystemInit+0x64>)
 8000496:	6812      	ldr	r2, [r2, #0]
 8000498:	4911      	ldr	r1, [pc, #68]	; (80004e0 <SystemInit+0x6c>)
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <SystemInit+0x64>)
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <SystemInit+0x64>)
 80004a2:	6892      	ldr	r2, [r2, #8]
 80004a4:	2101      	movs	r1, #1
 80004a6:	438a      	bics	r2, r1
 80004a8:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <SystemInit+0x64>)
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SystemInit+0x64>)
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	490c      	ldr	r1, [pc, #48]	; (80004e4 <SystemInit+0x70>)
 80004b2:	400a      	ands	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <SystemInit+0x64>)
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <SystemInit+0x64>)
 80004ba:	68d2      	ldr	r2, [r2, #12]
 80004bc:	490a      	ldr	r1, [pc, #40]	; (80004e8 <SystemInit+0x74>)
 80004be:	400a      	ands	r2, r1
 80004c0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SystemInit+0x64>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <SystemInit+0x78>)
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0512      	lsls	r2, r2, #20
 80004ce:	609a      	str	r2, [r3, #8]
#endif
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000
 80004dc:	88ff400c 	.word	0x88ff400c
 80004e0:	fef6fff6 	.word	0xfef6fff6
 80004e4:	fffbffff 	.word	0xfffbffff
 80004e8:	ff02ffff 	.word	0xff02ffff
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800050a:	4b40      	ldr	r3, [pc, #256]	; (800060c <SystemCoreClockUpdate+0x11c>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	220c      	movs	r2, #12
 8000510:	4013      	ands	r3, r2
 8000512:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d015      	beq.n	8000546 <SystemCoreClockUpdate+0x56>
 800051a:	d802      	bhi.n	8000522 <SystemCoreClockUpdate+0x32>
 800051c:	2b00      	cmp	r3, #0
 800051e:	d005      	beq.n	800052c <SystemCoreClockUpdate+0x3c>
 8000520:	e050      	b.n	80005c4 <SystemCoreClockUpdate+0xd4>
 8000522:	2b08      	cmp	r3, #8
 8000524:	d013      	beq.n	800054e <SystemCoreClockUpdate+0x5e>
 8000526:	2b0c      	cmp	r3, #12
 8000528:	d015      	beq.n	8000556 <SystemCoreClockUpdate+0x66>
 800052a:	e04b      	b.n	80005c4 <SystemCoreClockUpdate+0xd4>
  {
    case 0x00:  /* MSI used as system clock */
      SystemCoreClock = ((1 <<((RCC->ICSCR & RCC_ICSCR_MSIRANGE)>>13 ))* 64000);
 800052c:	4b37      	ldr	r3, [pc, #220]	; (800060c <SystemCoreClockUpdate+0x11c>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	0b5b      	lsrs	r3, r3, #13
 8000532:	2207      	movs	r2, #7
 8000534:	4013      	ands	r3, r2
 8000536:	22fa      	movs	r2, #250	; 0xfa
 8000538:	0212      	lsls	r2, r2, #8
 800053a:	409a      	lsls	r2, r3
 800053c:	0013      	movs	r3, r2
 800053e:	001a      	movs	r2, r3
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <SystemCoreClockUpdate+0x120>)
 8000542:	601a      	str	r2, [r3, #0]
      break;
 8000544:	e04e      	b.n	80005e4 <SystemCoreClockUpdate+0xf4>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <SystemCoreClockUpdate+0x120>)
 8000548:	4a32      	ldr	r2, [pc, #200]	; (8000614 <SystemCoreClockUpdate+0x124>)
 800054a:	601a      	str	r2, [r3, #0]
      break;
 800054c:	e04a      	b.n	80005e4 <SystemCoreClockUpdate+0xf4>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <SystemCoreClockUpdate+0x120>)
 8000550:	4a31      	ldr	r2, [pc, #196]	; (8000618 <SystemCoreClockUpdate+0x128>)
 8000552:	601a      	str	r2, [r3, #0]
      break;
 8000554:	e046      	b.n	80005e4 <SystemCoreClockUpdate+0xf4>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <SystemCoreClockUpdate+0x11c>)
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	23f0      	movs	r3, #240	; 0xf0
 800055c:	039b      	lsls	r3, r3, #14
 800055e:	4013      	ands	r3, r2
 8000560:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemCoreClockUpdate+0x11c>)
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	23c0      	movs	r3, #192	; 0xc0
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	4013      	ands	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	0c9b      	lsrs	r3, r3, #18
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <SystemCoreClockUpdate+0x12c>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	0d9b      	lsrs	r3, r3, #22
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemCoreClockUpdate+0x11c>)
 8000584:	68da      	ldr	r2, [r3, #12]
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	025b      	lsls	r3, r3, #9
 800058a:	4013      	ands	r3, r2
 800058c:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10b      	bne.n	80005ac <SystemCoreClockUpdate+0xbc>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <SystemCoreClockUpdate+0x124>)
 8000598:	4353      	muls	r3, r2
 800059a:	68f9      	ldr	r1, [r7, #12]
 800059c:	0018      	movs	r0, r3
 800059e:	f7ff fdbd 	bl	800011c <__udivsi3>
 80005a2:	0003      	movs	r3, r0
 80005a4:	001a      	movs	r2, r3
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <SystemCoreClockUpdate+0x120>)
 80005a8:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80005aa:	e01b      	b.n	80005e4 <SystemCoreClockUpdate+0xf4>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	4a1a      	ldr	r2, [pc, #104]	; (8000618 <SystemCoreClockUpdate+0x128>)
 80005b0:	4353      	muls	r3, r2
 80005b2:	68f9      	ldr	r1, [r7, #12]
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff fdb1 	bl	800011c <__udivsi3>
 80005ba:	0003      	movs	r3, r0
 80005bc:	001a      	movs	r2, r3
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <SystemCoreClockUpdate+0x120>)
 80005c0:	601a      	str	r2, [r3, #0]
      break;
 80005c2:	e00f      	b.n	80005e4 <SystemCoreClockUpdate+0xf4>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <SystemCoreClockUpdate+0x11c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	0b5b      	lsrs	r3, r3, #13
 80005ca:	2207      	movs	r2, #7
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	0212      	lsls	r2, r2, #8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	001a      	movs	r2, r3
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <SystemCoreClockUpdate+0x120>)
 80005e0:	601a      	str	r2, [r3, #0]
      break;
 80005e2:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <SystemCoreClockUpdate+0x11c>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	220f      	movs	r2, #15
 80005ec:	4013      	ands	r3, r2
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <SystemCoreClockUpdate+0x130>)
 80005f0:	5cd3      	ldrb	r3, [r2, r3]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <SystemCoreClockUpdate+0x120>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SystemCoreClockUpdate+0x120>)
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b006      	add	sp, #24
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000
 8000610:	20000000 	.word	0x20000000
 8000614:	00f42400 	.word	0x00f42400
 8000618:	007a1200 	.word	0x007a1200
 800061c:	20000014 	.word	0x20000014
 8000620:	20000004 	.word	0x20000004

08000624 <__libc_init_array>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	2600      	movs	r6, #0
 8000628:	4d0c      	ldr	r5, [pc, #48]	; (800065c <__libc_init_array+0x38>)
 800062a:	4c0d      	ldr	r4, [pc, #52]	; (8000660 <__libc_init_array+0x3c>)
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	42a6      	cmp	r6, r4
 8000632:	d109      	bne.n	8000648 <__libc_init_array+0x24>
 8000634:	2600      	movs	r6, #0
 8000636:	f000 f821 	bl	800067c <_init>
 800063a:	4d0a      	ldr	r5, [pc, #40]	; (8000664 <__libc_init_array+0x40>)
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <__libc_init_array+0x44>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	42a6      	cmp	r6, r4
 8000644:	d105      	bne.n	8000652 <__libc_init_array+0x2e>
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	00b3      	lsls	r3, r6, #2
 800064a:	58eb      	ldr	r3, [r5, r3]
 800064c:	4798      	blx	r3
 800064e:	3601      	adds	r6, #1
 8000650:	e7ee      	b.n	8000630 <__libc_init_array+0xc>
 8000652:	00b3      	lsls	r3, r6, #2
 8000654:	58eb      	ldr	r3, [r5, r3]
 8000656:	4798      	blx	r3
 8000658:	3601      	adds	r6, #1
 800065a:	e7f2      	b.n	8000642 <__libc_init_array+0x1e>
 800065c:	080006b8 	.word	0x080006b8
 8000660:	080006b8 	.word	0x080006b8
 8000664:	080006b8 	.word	0x080006b8
 8000668:	080006bc 	.word	0x080006bc

0800066c <memset>:
 800066c:	0003      	movs	r3, r0
 800066e:	1882      	adds	r2, r0, r2
 8000670:	4293      	cmp	r3, r2
 8000672:	d100      	bne.n	8000676 <memset+0xa>
 8000674:	4770      	bx	lr
 8000676:	7019      	strb	r1, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	e7f9      	b.n	8000670 <memset+0x4>

0800067c <_init>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr

08000688 <_fini>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr
