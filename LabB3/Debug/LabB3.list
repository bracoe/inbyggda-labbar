
LabB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a88  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001b48  08001b48  00011b48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001ba4  08001ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08001bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000090  20000004  08001bb0  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000094  08001bb0  00020094  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b3f5  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a74  00000000  00000000  0002b421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002af8  00000000  00000000  0002ce95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000540  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000610  00000000  00000000  0002fed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000032f3  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023f9  00000000  00000000  000337d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00035bcc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e24  00000000  00000000  00035c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001b30 	.word	0x08001b30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001b30 	.word	0x08001b30

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <strcmp>:
 8000116:	7802      	ldrb	r2, [r0, #0]
 8000118:	780b      	ldrb	r3, [r1, #0]
 800011a:	2a00      	cmp	r2, #0
 800011c:	d003      	beq.n	8000126 <strcmp+0x10>
 800011e:	3001      	adds	r0, #1
 8000120:	3101      	adds	r1, #1
 8000122:	429a      	cmp	r2, r3
 8000124:	d0f7      	beq.n	8000116 <strcmp>
 8000126:	1ad0      	subs	r0, r2, r3
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	1c08      	adds	r0, r1, #0
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__udivmoddi4>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	0004      	movs	r4, r0
 80002a6:	b083      	sub	sp, #12
 80002a8:	000d      	movs	r5, r1
 80002aa:	4692      	mov	sl, r2
 80002ac:	4699      	mov	r9, r3
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d82f      	bhi.n	8000312 <__udivmoddi4+0x7a>
 80002b2:	d02c      	beq.n	800030e <__udivmoddi4+0x76>
 80002b4:	4649      	mov	r1, r9
 80002b6:	4650      	mov	r0, sl
 80002b8:	f000 f8ae 	bl	8000418 <__clzdi2>
 80002bc:	0029      	movs	r1, r5
 80002be:	0006      	movs	r6, r0
 80002c0:	0020      	movs	r0, r4
 80002c2:	f000 f8a9 	bl	8000418 <__clzdi2>
 80002c6:	1a33      	subs	r3, r6, r0
 80002c8:	4698      	mov	r8, r3
 80002ca:	3b20      	subs	r3, #32
 80002cc:	469b      	mov	fp, r3
 80002ce:	d500      	bpl.n	80002d2 <__udivmoddi4+0x3a>
 80002d0:	e074      	b.n	80003bc <__udivmoddi4+0x124>
 80002d2:	4653      	mov	r3, sl
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	001f      	movs	r7, r3
 80002da:	4653      	mov	r3, sl
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	001e      	movs	r6, r3
 80002e2:	42af      	cmp	r7, r5
 80002e4:	d829      	bhi.n	800033a <__udivmoddi4+0xa2>
 80002e6:	d026      	beq.n	8000336 <__udivmoddi4+0x9e>
 80002e8:	465b      	mov	r3, fp
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	41bd      	sbcs	r5, r7
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	da00      	bge.n	80002f4 <__udivmoddi4+0x5c>
 80002f2:	e079      	b.n	80003e8 <__udivmoddi4+0x150>
 80002f4:	2200      	movs	r2, #0
 80002f6:	2300      	movs	r3, #0
 80002f8:	9200      	str	r2, [sp, #0]
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2301      	movs	r3, #1
 80002fe:	465a      	mov	r2, fp
 8000300:	4093      	lsls	r3, r2
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	2301      	movs	r3, #1
 8000306:	4642      	mov	r2, r8
 8000308:	4093      	lsls	r3, r2
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	e019      	b.n	8000342 <__udivmoddi4+0xaa>
 800030e:	4282      	cmp	r2, r0
 8000310:	d9d0      	bls.n	80002b4 <__udivmoddi4+0x1c>
 8000312:	2200      	movs	r2, #0
 8000314:	2300      	movs	r3, #0
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <__udivmoddi4+0x8c>
 8000320:	601c      	str	r4, [r3, #0]
 8000322:	605d      	str	r5, [r3, #4]
 8000324:	9800      	ldr	r0, [sp, #0]
 8000326:	9901      	ldr	r1, [sp, #4]
 8000328:	b003      	add	sp, #12
 800032a:	bc3c      	pop	{r2, r3, r4, r5}
 800032c:	4690      	mov	r8, r2
 800032e:	4699      	mov	r9, r3
 8000330:	46a2      	mov	sl, r4
 8000332:	46ab      	mov	fp, r5
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	42a3      	cmp	r3, r4
 8000338:	d9d6      	bls.n	80002e8 <__udivmoddi4+0x50>
 800033a:	2200      	movs	r2, #0
 800033c:	2300      	movs	r3, #0
 800033e:	9200      	str	r2, [sp, #0]
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	4643      	mov	r3, r8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d0e8      	beq.n	800031a <__udivmoddi4+0x82>
 8000348:	07fb      	lsls	r3, r7, #31
 800034a:	0872      	lsrs	r2, r6, #1
 800034c:	431a      	orrs	r2, r3
 800034e:	4646      	mov	r6, r8
 8000350:	087b      	lsrs	r3, r7, #1
 8000352:	e00e      	b.n	8000372 <__udivmoddi4+0xda>
 8000354:	42ab      	cmp	r3, r5
 8000356:	d101      	bne.n	800035c <__udivmoddi4+0xc4>
 8000358:	42a2      	cmp	r2, r4
 800035a:	d80c      	bhi.n	8000376 <__udivmoddi4+0xde>
 800035c:	1aa4      	subs	r4, r4, r2
 800035e:	419d      	sbcs	r5, r3
 8000360:	2001      	movs	r0, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2100      	movs	r1, #0
 8000368:	3e01      	subs	r6, #1
 800036a:	1824      	adds	r4, r4, r0
 800036c:	414d      	adcs	r5, r1
 800036e:	2e00      	cmp	r6, #0
 8000370:	d006      	beq.n	8000380 <__udivmoddi4+0xe8>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d9ee      	bls.n	8000354 <__udivmoddi4+0xbc>
 8000376:	3e01      	subs	r6, #1
 8000378:	1924      	adds	r4, r4, r4
 800037a:	416d      	adcs	r5, r5
 800037c:	2e00      	cmp	r6, #0
 800037e:	d1f8      	bne.n	8000372 <__udivmoddi4+0xda>
 8000380:	465b      	mov	r3, fp
 8000382:	9800      	ldr	r0, [sp, #0]
 8000384:	9901      	ldr	r1, [sp, #4]
 8000386:	1900      	adds	r0, r0, r4
 8000388:	4169      	adcs	r1, r5
 800038a:	2b00      	cmp	r3, #0
 800038c:	db22      	blt.n	80003d4 <__udivmoddi4+0x13c>
 800038e:	002b      	movs	r3, r5
 8000390:	465a      	mov	r2, fp
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	4644      	mov	r4, r8
 8000398:	40e2      	lsrs	r2, r4
 800039a:	001c      	movs	r4, r3
 800039c:	465b      	mov	r3, fp
 800039e:	0015      	movs	r5, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	db2c      	blt.n	80003fe <__udivmoddi4+0x166>
 80003a4:	0026      	movs	r6, r4
 80003a6:	409e      	lsls	r6, r3
 80003a8:	0033      	movs	r3, r6
 80003aa:	0026      	movs	r6, r4
 80003ac:	4647      	mov	r7, r8
 80003ae:	40be      	lsls	r6, r7
 80003b0:	0032      	movs	r2, r6
 80003b2:	1a80      	subs	r0, r0, r2
 80003b4:	4199      	sbcs	r1, r3
 80003b6:	9000      	str	r0, [sp, #0]
 80003b8:	9101      	str	r1, [sp, #4]
 80003ba:	e7ae      	b.n	800031a <__udivmoddi4+0x82>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	4652      	mov	r2, sl
 80003c4:	40da      	lsrs	r2, r3
 80003c6:	4641      	mov	r1, r8
 80003c8:	0013      	movs	r3, r2
 80003ca:	464a      	mov	r2, r9
 80003cc:	408a      	lsls	r2, r1
 80003ce:	0017      	movs	r7, r2
 80003d0:	431f      	orrs	r7, r3
 80003d2:	e782      	b.n	80002da <__udivmoddi4+0x42>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	4646      	mov	r6, r8
 80003de:	409a      	lsls	r2, r3
 80003e0:	0023      	movs	r3, r4
 80003e2:	40f3      	lsrs	r3, r6
 80003e4:	4313      	orrs	r3, r2
 80003e6:	e7d5      	b.n	8000394 <__udivmoddi4+0xfc>
 80003e8:	4642      	mov	r2, r8
 80003ea:	2320      	movs	r3, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	9100      	str	r1, [sp, #0]
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	2201      	movs	r2, #1
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	9201      	str	r2, [sp, #4]
 80003fc:	e782      	b.n	8000304 <__udivmoddi4+0x6c>
 80003fe:	4642      	mov	r2, r8
 8000400:	2320      	movs	r3, #32
 8000402:	0026      	movs	r6, r4
 8000404:	1a9b      	subs	r3, r3, r2
 8000406:	40de      	lsrs	r6, r3
 8000408:	002f      	movs	r7, r5
 800040a:	46b4      	mov	ip, r6
 800040c:	4097      	lsls	r7, r2
 800040e:	4666      	mov	r6, ip
 8000410:	003b      	movs	r3, r7
 8000412:	4333      	orrs	r3, r6
 8000414:	e7c9      	b.n	80003aa <__udivmoddi4+0x112>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__clzdi2>:
 8000418:	b510      	push	{r4, lr}
 800041a:	2900      	cmp	r1, #0
 800041c:	d103      	bne.n	8000426 <__clzdi2+0xe>
 800041e:	f000 f807 	bl	8000430 <__clzsi2>
 8000422:	3020      	adds	r0, #32
 8000424:	e002      	b.n	800042c <__clzdi2+0x14>
 8000426:	1c08      	adds	r0, r1, #0
 8000428:	f000 f802 	bl	8000430 <__clzsi2>
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__clzsi2>:
 8000430:	211c      	movs	r1, #28
 8000432:	2301      	movs	r3, #1
 8000434:	041b      	lsls	r3, r3, #16
 8000436:	4298      	cmp	r0, r3
 8000438:	d301      	bcc.n	800043e <__clzsi2+0xe>
 800043a:	0c00      	lsrs	r0, r0, #16
 800043c:	3910      	subs	r1, #16
 800043e:	0a1b      	lsrs	r3, r3, #8
 8000440:	4298      	cmp	r0, r3
 8000442:	d301      	bcc.n	8000448 <__clzsi2+0x18>
 8000444:	0a00      	lsrs	r0, r0, #8
 8000446:	3908      	subs	r1, #8
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	4298      	cmp	r0, r3
 800044c:	d301      	bcc.n	8000452 <__clzsi2+0x22>
 800044e:	0900      	lsrs	r0, r0, #4
 8000450:	3904      	subs	r1, #4
 8000452:	a202      	add	r2, pc, #8	; (adr r2, 800045c <__clzsi2+0x2c>)
 8000454:	5c10      	ldrb	r0, [r2, r0]
 8000456:	1840      	adds	r0, r0, r1
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	02020304 	.word	0x02020304
 8000460:	01010101 	.word	0x01010101
	...

0800046c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800046c:	21fa      	movs	r1, #250	; 0xfa
 800046e:	4b08      	ldr	r3, [pc, #32]	; (8000490 <HAL_InitTick+0x24>)
{
 8000470:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000472:	0089      	lsls	r1, r1, #2
{
 8000474:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000476:	6818      	ldr	r0, [r3, #0]
 8000478:	f7ff fe62 	bl	8000140 <__udivsi3>
 800047c:	f000 f858 	bl	8000530 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000480:	2001      	movs	r0, #1
 8000482:	2200      	movs	r2, #0
 8000484:	0021      	movs	r1, r4
 8000486:	4240      	negs	r0, r0
 8000488:	f000 f822 	bl	80004d0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800048c:	2000      	movs	r0, #0
 800048e:	bd10      	pop	{r4, pc}
 8000490:	20000000 	.word	0x20000000

08000494 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000494:	2340      	movs	r3, #64	; 0x40
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <HAL_Init+0x1c>)
{
 8000498:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800049a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800049c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800049e:	430b      	orrs	r3, r1
 80004a0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a2:	f7ff ffe3 	bl	800046c <HAL_InitTick>
  HAL_MspInit();
 80004a6:	f001 fa67 	bl	8001978 <HAL_MspInit>
}
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000020 	.word	0x20000020

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000020 	.word	0x20000020

080004d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004d4:	2800      	cmp	r0, #0
 80004d6:	da14      	bge.n	8000502 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	230f      	movs	r3, #15
 80004da:	b2c0      	uxtb	r0, r0
 80004dc:	4003      	ands	r3, r0
 80004de:	3b08      	subs	r3, #8
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_NVIC_SetPriority+0x58>)
 80004e2:	089b      	lsrs	r3, r3, #2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	4010      	ands	r0, r2
 80004ec:	4090      	lsls	r0, r2
 80004ee:	32fc      	adds	r2, #252	; 0xfc
 80004f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	69dc      	ldr	r4, [r3, #28]
 80004fa:	43ac      	bics	r4, r5
 80004fc:	4321      	orrs	r1, r4
 80004fe:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	2503      	movs	r5, #3
 8000504:	0883      	lsrs	r3, r0, #2
 8000506:	4028      	ands	r0, r5
 8000508:	40a8      	lsls	r0, r5
 800050a:	35fc      	adds	r5, #252	; 0xfc
 800050c:	002e      	movs	r6, r5
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_NVIC_SetPriority+0x5c>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	189b      	adds	r3, r3, r2
 8000514:	22c0      	movs	r2, #192	; 0xc0
 8000516:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000518:	4029      	ands	r1, r5
 800051a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	589c      	ldr	r4, [r3, r2]
 8000520:	43b4      	bics	r4, r6
 8000522:	4321      	orrs	r1, r4
 8000524:	5099      	str	r1, [r3, r2]
 8000526:	e7eb      	b.n	8000500 <HAL_NVIC_SetPriority+0x30>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	e000e100 	.word	0xe000e100

08000530 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_SYSTICK_Config+0x28>)
 8000532:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000534:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000536:	4293      	cmp	r3, r2
 8000538:	d80d      	bhi.n	8000556 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000540:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000542:	6a03      	ldr	r3, [r0, #32]
 8000544:	0609      	lsls	r1, r1, #24
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	430b      	orrs	r3, r1
 800054c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000550:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000552:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000554:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000556:	4770      	bx	lr
 8000558:	00ffffff 	.word	0x00ffffff
 800055c:	e000e010 	.word	0xe000e010
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000566:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000568:	2804      	cmp	r0, #4
 800056a:	d102      	bne.n	8000572 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800056c:	4310      	orrs	r0, r2
 800056e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000570:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000572:	2104      	movs	r1, #4
 8000574:	438a      	bics	r2, r1
 8000576:	601a      	str	r2, [r3, #0]
}
 8000578:	e7fa      	b.n	8000570 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	e000e010 	.word	0xe000e010

08000580 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000580:	4770      	bx	lr

08000582 <HAL_SYSTICK_IRQHandler>:
{
 8000582:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000584:	f7ff fffc 	bl	8000580 <HAL_SYSTICK_Callback>
}
 8000588:	bd10      	pop	{r4, pc}
	...

0800058c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800058e:	4a53      	ldr	r2, [pc, #332]	; (80006dc <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000590:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000592:	1882      	adds	r2, r0, r2
 8000594:	1e54      	subs	r4, r2, #1
 8000596:	41a2      	sbcs	r2, r4
{
 8000598:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800059a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800059c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800059e:	3205      	adds	r2, #5
 80005a0:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005a2:	9a01      	ldr	r2, [sp, #4]
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	d101      	bne.n	80005ac <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005a8:	b005      	add	sp, #20
 80005aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005ac:	2501      	movs	r5, #1
 80005ae:	409d      	lsls	r5, r3
 80005b0:	9a01      	ldr	r2, [sp, #4]
 80005b2:	402a      	ands	r2, r5
 80005b4:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005b6:	d100      	bne.n	80005ba <HAL_GPIO_Init+0x2e>
 80005b8:	e08d      	b.n	80006d6 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005ba:	684a      	ldr	r2, [r1, #4]
 80005bc:	4694      	mov	ip, r2
 80005be:	2210      	movs	r2, #16
 80005c0:	4664      	mov	r4, ip
 80005c2:	4394      	bics	r4, r2
 80005c4:	0022      	movs	r2, r4
 80005c6:	3c01      	subs	r4, #1
 80005c8:	2a02      	cmp	r2, #2
 80005ca:	d11f      	bne.n	800060c <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005cc:	2407      	movs	r4, #7
 80005ce:	270f      	movs	r7, #15
 80005d0:	401c      	ands	r4, r3
 80005d2:	00a4      	lsls	r4, r4, #2
 80005d4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005d6:	08da      	lsrs	r2, r3, #3
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	1882      	adds	r2, r0, r2
 80005dc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005de:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005e0:	690f      	ldr	r7, [r1, #16]
 80005e2:	40a7      	lsls	r7, r4
 80005e4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005e6:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005e8:	2403      	movs	r4, #3
 80005ea:	005e      	lsls	r6, r3, #1
 80005ec:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005ee:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005f0:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005f2:	68cc      	ldr	r4, [r1, #12]
 80005f4:	40b4      	lsls	r4, r6
 80005f6:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005f8:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005fa:	4662      	mov	r2, ip
 80005fc:	06d2      	lsls	r2, r2, #27
 80005fe:	0fd2      	lsrs	r2, r2, #31
 8000600:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8000602:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000604:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000606:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000608:	6042      	str	r2, [r0, #4]
 800060a:	e001      	b.n	8000610 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800060c:	2c01      	cmp	r4, #1
 800060e:	d9eb      	bls.n	80005e8 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000610:	2603      	movs	r6, #3
 8000612:	0034      	movs	r4, r6
 8000614:	005d      	lsls	r5, r3, #1
 8000616:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000618:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800061a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800061c:	4032      	ands	r2, r6
 800061e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000620:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000622:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000624:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000626:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000628:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800062a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800062c:	688a      	ldr	r2, [r1, #8]
 800062e:	40aa      	lsls	r2, r5
 8000630:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000632:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000634:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000636:	00d2      	lsls	r2, r2, #3
 8000638:	d54d      	bpl.n	80006d6 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	2501      	movs	r5, #1
 800063c:	4c28      	ldr	r4, [pc, #160]	; (80006e0 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800063e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000642:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000644:	001d      	movs	r5, r3
 8000646:	4035      	ands	r5, r6
 8000648:	00ad      	lsls	r5, r5, #2
 800064a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064c:	6362      	str	r2, [r4, #52]	; 0x34
 800064e:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000650:	089c      	lsrs	r4, r3, #2
 8000652:	00a4      	lsls	r4, r4, #2
 8000654:	18a4      	adds	r4, r4, r2
 8000656:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000658:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800065a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800065c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800065e:	05ff      	lsls	r7, r7, #23
 8000660:	2200      	movs	r2, #0
 8000662:	42b8      	cmp	r0, r7
 8000664:	d00c      	beq.n	8000680 <HAL_GPIO_Init+0xf4>
 8000666:	4f20      	ldr	r7, [pc, #128]	; (80006e8 <HAL_GPIO_Init+0x15c>)
 8000668:	3201      	adds	r2, #1
 800066a:	42b8      	cmp	r0, r7
 800066c:	d008      	beq.n	8000680 <HAL_GPIO_Init+0xf4>
 800066e:	4f1f      	ldr	r7, [pc, #124]	; (80006ec <HAL_GPIO_Init+0x160>)
 8000670:	3201      	adds	r2, #1
 8000672:	42b8      	cmp	r0, r7
 8000674:	d004      	beq.n	8000680 <HAL_GPIO_Init+0xf4>
 8000676:	4f1e      	ldr	r7, [pc, #120]	; (80006f0 <HAL_GPIO_Init+0x164>)
 8000678:	0032      	movs	r2, r6
 800067a:	42b8      	cmp	r0, r7
 800067c:	d000      	beq.n	8000680 <HAL_GPIO_Init+0xf4>
 800067e:	9a03      	ldr	r2, [sp, #12]
 8000680:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000682:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000684:	9d02      	ldr	r5, [sp, #8]
 8000686:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000688:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800068a:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 800068c:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800068e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000690:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000692:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000694:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000696:	03ff      	lsls	r7, r7, #15
 8000698:	d401      	bmi.n	800069e <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 800069a:	0035      	movs	r5, r6
 800069c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800069e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006a0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006a2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006a4:	9d00      	ldr	r5, [sp, #0]
 80006a6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a8:	03bf      	lsls	r7, r7, #14
 80006aa:	d401      	bmi.n	80006b0 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 80006ac:	0035      	movs	r5, r6
 80006ae:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006b0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006b2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006b4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006b6:	9d00      	ldr	r5, [sp, #0]
 80006b8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ba:	02ff      	lsls	r7, r7, #11
 80006bc:	d401      	bmi.n	80006c2 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 80006be:	0035      	movs	r5, r6
 80006c0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006c2:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006c4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006c6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006c8:	9e00      	ldr	r6, [sp, #0]
 80006ca:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006cc:	02bf      	lsls	r7, r7, #10
 80006ce:	d401      	bmi.n	80006d4 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 80006d0:	4025      	ands	r5, r4
 80006d2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006d4:	60d6      	str	r6, [r2, #12]
    position++;
 80006d6:	3301      	adds	r3, #1
 80006d8:	e763      	b.n	80005a2 <HAL_GPIO_Init+0x16>
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	afffe400 	.word	0xafffe400
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010000 	.word	0x40010000
 80006e8:	50000400 	.word	0x50000400
 80006ec:	50000800 	.word	0x50000800
 80006f0:	50000c00 	.word	0x50000c00
 80006f4:	40010400 	.word	0x40010400

080006f8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006f8:	22f0      	movs	r2, #240	; 0xf0
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 80006fc:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80006fe:	68d9      	ldr	r1, [r3, #12]
 8000700:	4211      	tst	r1, r2
 8000702:	d00b      	beq.n	800071c <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000704:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000706:	2101      	movs	r1, #1
 8000708:	4814      	ldr	r0, [pc, #80]	; (800075c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800070a:	6802      	ldr	r2, [r0, #0]
 800070c:	438a      	bics	r2, r1
 800070e:	431a      	orrs	r2, r3
 8000710:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000712:	6800      	ldr	r0, [r0, #0]
 8000714:	4008      	ands	r0, r1
 8000716:	4058      	eors	r0, r3
 8000718:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800071a:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	22c0      	movs	r2, #192	; 0xc0
 8000720:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000722:	0549      	lsls	r1, r1, #21
 8000724:	4c0e      	ldr	r4, [pc, #56]	; (8000760 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8000726:	0152      	lsls	r2, r2, #5
 8000728:	420d      	tst	r5, r1
 800072a:	d00a      	beq.n	8000742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000730:	23c0      	movs	r3, #192	; 0xc0
 8000732:	015b      	lsls	r3, r3, #5
 8000734:	429a      	cmp	r2, r3
 8000736:	d1e5      	bne.n	8000704 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800073a:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800073c:	4243      	negs	r3, r0
 800073e:	4143      	adcs	r3, r0
 8000740:	e7e1      	b.n	8000706 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000744:	4329      	orrs	r1, r5
 8000746:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000748:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800074a:	4c07      	ldr	r4, [pc, #28]	; (8000768 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800074c:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800074e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000750:	4021      	ands	r1, r4
 8000752:	6399      	str	r1, [r3, #56]	; 0x38
 8000754:	e7ec      	b.n	8000730 <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000
 800075c:	40022000 	.word	0x40022000
 8000760:	40007000 	.word	0x40007000
 8000764:	ffff4000 	.word	0xffff4000
 8000768:	efffffff 	.word	0xefffffff

0800076c <HAL_RCC_OscConfig>:
{
 800076c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800076e:	6803      	ldr	r3, [r0, #0]
{
 8000770:	b085      	sub	sp, #20
 8000772:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000774:	07db      	lsls	r3, r3, #31
 8000776:	d44e      	bmi.n	8000816 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	079b      	lsls	r3, r3, #30
 800077c:	d500      	bpl.n	8000780 <HAL_RCC_OscConfig+0x14>
 800077e:	e09f      	b.n	80008c0 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	06db      	lsls	r3, r3, #27
 8000784:	d535      	bpl.n	80007f2 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000786:	230c      	movs	r3, #12
 8000788:	4dbc      	ldr	r5, [pc, #752]	; (8000a7c <HAL_RCC_OscConfig+0x310>)
 800078a:	68ea      	ldr	r2, [r5, #12]
 800078c:	421a      	tst	r2, r3
 800078e:	d000      	beq.n	8000792 <HAL_RCC_OscConfig+0x26>
 8000790:	e0e9      	b.n	8000966 <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000792:	682b      	ldr	r3, [r5, #0]
 8000794:	059b      	lsls	r3, r3, #22
 8000796:	d502      	bpl.n	800079e <HAL_RCC_OscConfig+0x32>
 8000798:	69e3      	ldr	r3, [r4, #28]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d050      	beq.n	8000840 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800079e:	22e0      	movs	r2, #224	; 0xe0
 80007a0:	686b      	ldr	r3, [r5, #4]
 80007a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80007a4:	0212      	lsls	r2, r2, #8
 80007a6:	4013      	ands	r3, r2
 80007a8:	4298      	cmp	r0, r3
 80007aa:	d800      	bhi.n	80007ae <HAL_RCC_OscConfig+0x42>
 80007ac:	e0c9      	b.n	8000942 <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007ae:	f7ff ffa3 	bl	80006f8 <RCC_SetFlashLatencyFromMSIRange>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d144      	bne.n	8000840 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007b6:	686b      	ldr	r3, [r5, #4]
 80007b8:	4ab1      	ldr	r2, [pc, #708]	; (8000a80 <HAL_RCC_OscConfig+0x314>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007be:	4313      	orrs	r3, r2
 80007c0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007c2:	686a      	ldr	r2, [r5, #4]
 80007c4:	6a23      	ldr	r3, [r4, #32]
 80007c6:	0212      	lsls	r2, r2, #8
 80007c8:	061b      	lsls	r3, r3, #24
 80007ca:	0a12      	lsrs	r2, r2, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007d2:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007d4:	0b59      	lsrs	r1, r3, #13
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	3101      	adds	r1, #1
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007de:	0612      	lsls	r2, r2, #24
 80007e0:	49a8      	ldr	r1, [pc, #672]	; (8000a84 <HAL_RCC_OscConfig+0x318>)
 80007e2:	0f12      	lsrs	r2, r2, #28
 80007e4:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007e6:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 80007e8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 80007ea:	4aa7      	ldr	r2, [pc, #668]	; (8000a88 <HAL_RCC_OscConfig+0x31c>)
 80007ec:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80007ee:	f7ff fe3d 	bl	800046c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	071b      	lsls	r3, r3, #28
 80007f6:	d500      	bpl.n	80007fa <HAL_RCC_OscConfig+0x8e>
 80007f8:	e0ec      	b.n	80009d4 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	075b      	lsls	r3, r3, #29
 80007fe:	d500      	bpl.n	8000802 <HAL_RCC_OscConfig+0x96>
 8000800:	e10f      	b.n	8000a22 <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	069b      	lsls	r3, r3, #26
 8000806:	d500      	bpl.n	800080a <HAL_RCC_OscConfig+0x9e>
 8000808:	e190      	b.n	8000b2c <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800080a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800080c:	2900      	cmp	r1, #0
 800080e:	d000      	beq.n	8000812 <HAL_RCC_OscConfig+0xa6>
 8000810:	e1c0      	b.n	8000b94 <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 8000812:	2000      	movs	r0, #0
 8000814:	e015      	b.n	8000842 <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000816:	210c      	movs	r1, #12
 8000818:	4d98      	ldr	r5, [pc, #608]	; (8000a7c <HAL_RCC_OscConfig+0x310>)
 800081a:	68eb      	ldr	r3, [r5, #12]
 800081c:	400b      	ands	r3, r1
 800081e:	2b08      	cmp	r3, #8
 8000820:	d008      	beq.n	8000834 <HAL_RCC_OscConfig+0xc8>
 8000822:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000824:	68ea      	ldr	r2, [r5, #12]
 8000826:	025b      	lsls	r3, r3, #9
 8000828:	400a      	ands	r2, r1
 800082a:	428a      	cmp	r2, r1
 800082c:	d10b      	bne.n	8000846 <HAL_RCC_OscConfig+0xda>
 800082e:	68ea      	ldr	r2, [r5, #12]
 8000830:	421a      	tst	r2, r3
 8000832:	d008      	beq.n	8000846 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000834:	682b      	ldr	r3, [r5, #0]
 8000836:	039b      	lsls	r3, r3, #14
 8000838:	d59e      	bpl.n	8000778 <HAL_RCC_OscConfig+0xc>
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d19b      	bne.n	8000778 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000840:	2001      	movs	r0, #1
}
 8000842:	b005      	add	sp, #20
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000846:	6862      	ldr	r2, [r4, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	d112      	bne.n	8000872 <HAL_RCC_OscConfig+0x106>
 800084c:	682a      	ldr	r2, [r5, #0]
 800084e:	4313      	orrs	r3, r2
 8000850:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000852:	f7ff fe37 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000856:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000858:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085a:	02b6      	lsls	r6, r6, #10
 800085c:	682b      	ldr	r3, [r5, #0]
 800085e:	4233      	tst	r3, r6
 8000860:	d000      	beq.n	8000864 <HAL_RCC_OscConfig+0xf8>
 8000862:	e789      	b.n	8000778 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fe2e 	bl	80004c4 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2864      	cmp	r0, #100	; 0x64
 800086c:	d9f6      	bls.n	800085c <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 800086e:	2003      	movs	r0, #3
 8000870:	e7e7      	b.n	8000842 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	21a0      	movs	r1, #160	; 0xa0
 8000874:	02c9      	lsls	r1, r1, #11
 8000876:	428a      	cmp	r2, r1
 8000878:	d105      	bne.n	8000886 <HAL_RCC_OscConfig+0x11a>
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	6829      	ldr	r1, [r5, #0]
 800087e:	02d2      	lsls	r2, r2, #11
 8000880:	430a      	orrs	r2, r1
 8000882:	602a      	str	r2, [r5, #0]
 8000884:	e7e2      	b.n	800084c <HAL_RCC_OscConfig+0xe0>
 8000886:	6829      	ldr	r1, [r5, #0]
 8000888:	4880      	ldr	r0, [pc, #512]	; (8000a8c <HAL_RCC_OscConfig+0x320>)
 800088a:	4001      	ands	r1, r0
 800088c:	6029      	str	r1, [r5, #0]
 800088e:	6829      	ldr	r1, [r5, #0]
 8000890:	400b      	ands	r3, r1
 8000892:	9303      	str	r3, [sp, #12]
 8000894:	9b03      	ldr	r3, [sp, #12]
 8000896:	497e      	ldr	r1, [pc, #504]	; (8000a90 <HAL_RCC_OscConfig+0x324>)
 8000898:	682b      	ldr	r3, [r5, #0]
 800089a:	400b      	ands	r3, r1
 800089c:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800089e:	2a00      	cmp	r2, #0
 80008a0:	d1d7      	bne.n	8000852 <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80008a2:	f7ff fe0f 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008aa:	02b6      	lsls	r6, r6, #10
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	4233      	tst	r3, r6
 80008b0:	d100      	bne.n	80008b4 <HAL_RCC_OscConfig+0x148>
 80008b2:	e761      	b.n	8000778 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fe06 	bl	80004c4 <HAL_GetTick>
 80008b8:	1bc0      	subs	r0, r0, r7
 80008ba:	2864      	cmp	r0, #100	; 0x64
 80008bc:	d9f6      	bls.n	80008ac <HAL_RCC_OscConfig+0x140>
 80008be:	e7d6      	b.n	800086e <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008c0:	210c      	movs	r1, #12
 80008c2:	4d6e      	ldr	r5, [pc, #440]	; (8000a7c <HAL_RCC_OscConfig+0x310>)
 80008c4:	68ea      	ldr	r2, [r5, #12]
 80008c6:	400a      	ands	r2, r1
 80008c8:	2a04      	cmp	r2, #4
 80008ca:	d006      	beq.n	80008da <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008cc:	68eb      	ldr	r3, [r5, #12]
 80008ce:	400b      	ands	r3, r1
 80008d0:	428b      	cmp	r3, r1
 80008d2:	d110      	bne.n	80008f6 <HAL_RCC_OscConfig+0x18a>
 80008d4:	68eb      	ldr	r3, [r5, #12]
 80008d6:	03db      	lsls	r3, r3, #15
 80008d8:	d40d      	bmi.n	80008f6 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008da:	682b      	ldr	r3, [r5, #0]
 80008dc:	075b      	lsls	r3, r3, #29
 80008de:	d502      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x17a>
 80008e0:	68e3      	ldr	r3, [r4, #12]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d1ac      	bne.n	8000840 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e6:	686a      	ldr	r2, [r5, #4]
 80008e8:	6923      	ldr	r3, [r4, #16]
 80008ea:	496a      	ldr	r1, [pc, #424]	; (8000a94 <HAL_RCC_OscConfig+0x328>)
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	400a      	ands	r2, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	606b      	str	r3, [r5, #4]
 80008f4:	e744      	b.n	8000780 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008f6:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008f8:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d010      	beq.n	8000920 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008fe:	2109      	movs	r1, #9
 8000900:	438b      	bics	r3, r1
 8000902:	4313      	orrs	r3, r2
 8000904:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000906:	f7ff fddd 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090a:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 800090c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800090e:	682b      	ldr	r3, [r5, #0]
 8000910:	4233      	tst	r3, r6
 8000912:	d1e8      	bne.n	80008e6 <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000914:	f7ff fdd6 	bl	80004c4 <HAL_GetTick>
 8000918:	1bc0      	subs	r0, r0, r7
 800091a:	2802      	cmp	r0, #2
 800091c:	d9f7      	bls.n	800090e <HAL_RCC_OscConfig+0x1a2>
 800091e:	e7a6      	b.n	800086e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8000920:	2201      	movs	r2, #1
 8000922:	4393      	bics	r3, r2
 8000924:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000926:	f7ff fdcd 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092a:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 800092c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	4233      	tst	r3, r6
 8000932:	d100      	bne.n	8000936 <HAL_RCC_OscConfig+0x1ca>
 8000934:	e724      	b.n	8000780 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000936:	f7ff fdc5 	bl	80004c4 <HAL_GetTick>
 800093a:	1bc0      	subs	r0, r0, r7
 800093c:	2802      	cmp	r0, #2
 800093e:	d9f6      	bls.n	800092e <HAL_RCC_OscConfig+0x1c2>
 8000940:	e795      	b.n	800086e <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000942:	686b      	ldr	r3, [r5, #4]
 8000944:	4a4e      	ldr	r2, [pc, #312]	; (8000a80 <HAL_RCC_OscConfig+0x314>)
 8000946:	4013      	ands	r3, r2
 8000948:	4303      	orrs	r3, r0
 800094a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800094c:	686a      	ldr	r2, [r5, #4]
 800094e:	6a23      	ldr	r3, [r4, #32]
 8000950:	0212      	lsls	r2, r2, #8
 8000952:	061b      	lsls	r3, r3, #24
 8000954:	0a12      	lsrs	r2, r2, #8
 8000956:	4313      	orrs	r3, r2
 8000958:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800095a:	f7ff fecd 	bl	80006f8 <RCC_SetFlashLatencyFromMSIRange>
 800095e:	2800      	cmp	r0, #0
 8000960:	d100      	bne.n	8000964 <HAL_RCC_OscConfig+0x1f8>
 8000962:	e735      	b.n	80007d0 <HAL_RCC_OscConfig+0x64>
 8000964:	e76c      	b.n	8000840 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000966:	69e3      	ldr	r3, [r4, #28]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d020      	beq.n	80009ae <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	682a      	ldr	r2, [r5, #0]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4313      	orrs	r3, r2
 8000974:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000976:	f7ff fda5 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800097a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800097c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800097e:	00b6      	lsls	r6, r6, #2
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	4233      	tst	r3, r6
 8000984:	d00d      	beq.n	80009a2 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000986:	686b      	ldr	r3, [r5, #4]
 8000988:	4a3d      	ldr	r2, [pc, #244]	; (8000a80 <HAL_RCC_OscConfig+0x314>)
 800098a:	4013      	ands	r3, r2
 800098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098e:	4313      	orrs	r3, r2
 8000990:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000992:	686a      	ldr	r2, [r5, #4]
 8000994:	6a23      	ldr	r3, [r4, #32]
 8000996:	0212      	lsls	r2, r2, #8
 8000998:	061b      	lsls	r3, r3, #24
 800099a:	0a12      	lsrs	r2, r2, #8
 800099c:	4313      	orrs	r3, r2
 800099e:	606b      	str	r3, [r5, #4]
 80009a0:	e727      	b.n	80007f2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009a2:	f7ff fd8f 	bl	80004c4 <HAL_GetTick>
 80009a6:	1bc0      	subs	r0, r0, r7
 80009a8:	2802      	cmp	r0, #2
 80009aa:	d9e9      	bls.n	8000980 <HAL_RCC_OscConfig+0x214>
 80009ac:	e75f      	b.n	800086e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	4a39      	ldr	r2, [pc, #228]	; (8000a98 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009b2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 80009b4:	4013      	ands	r3, r2
 80009b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009b8:	f7ff fd84 	bl	80004c4 <HAL_GetTick>
 80009bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80009be:	00b6      	lsls	r6, r6, #2
 80009c0:	682b      	ldr	r3, [r5, #0]
 80009c2:	4233      	tst	r3, r6
 80009c4:	d100      	bne.n	80009c8 <HAL_RCC_OscConfig+0x25c>
 80009c6:	e714      	b.n	80007f2 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009c8:	f7ff fd7c 	bl	80004c4 <HAL_GetTick>
 80009cc:	1bc0      	subs	r0, r0, r7
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9f6      	bls.n	80009c0 <HAL_RCC_OscConfig+0x254>
 80009d2:	e74c      	b.n	800086e <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009d4:	6962      	ldr	r2, [r4, #20]
 80009d6:	2301      	movs	r3, #1
 80009d8:	4d28      	ldr	r5, [pc, #160]	; (8000a7c <HAL_RCC_OscConfig+0x310>)
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d010      	beq.n	8000a00 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 80009de:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009e0:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80009e2:	4313      	orrs	r3, r2
 80009e4:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009e6:	f7ff fd6d 	bl	80004c4 <HAL_GetTick>
 80009ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009ee:	4233      	tst	r3, r6
 80009f0:	d000      	beq.n	80009f4 <HAL_RCC_OscConfig+0x288>
 80009f2:	e702      	b.n	80007fa <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f4:	f7ff fd66 	bl	80004c4 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9f6      	bls.n	80009ec <HAL_RCC_OscConfig+0x280>
 80009fe:	e736      	b.n	800086e <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000a00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a02:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a04:	439a      	bics	r2, r3
 8000a06:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a08:	f7ff fd5c 	bl	80004c4 <HAL_GetTick>
 8000a0c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a10:	4233      	tst	r3, r6
 8000a12:	d100      	bne.n	8000a16 <HAL_RCC_OscConfig+0x2aa>
 8000a14:	e6f1      	b.n	80007fa <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a16:	f7ff fd55 	bl	80004c4 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d9f6      	bls.n	8000a0e <HAL_RCC_OscConfig+0x2a2>
 8000a20:	e725      	b.n	800086e <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a22:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a24:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a26:	4d15      	ldr	r5, [pc, #84]	; (8000a7c <HAL_RCC_OscConfig+0x310>)
 8000a28:	055b      	lsls	r3, r3, #21
 8000a2a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000a2c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2e:	421a      	tst	r2, r3
 8000a30:	d104      	bne.n	8000a3c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000a34:	4313      	orrs	r3, r2
 8000a36:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a3c:	2780      	movs	r7, #128	; 0x80
 8000a3e:	4e17      	ldr	r6, [pc, #92]	; (8000a9c <HAL_RCC_OscConfig+0x330>)
 8000a40:	007f      	lsls	r7, r7, #1
 8000a42:	6833      	ldr	r3, [r6, #0]
 8000a44:	423b      	tst	r3, r7
 8000a46:	d008      	beq.n	8000a5a <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	68a3      	ldr	r3, [r4, #8]
 8000a4c:	0052      	lsls	r2, r2, #1
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d126      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x334>
 8000a52:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000a54:	4313      	orrs	r3, r2
 8000a56:	652b      	str	r3, [r5, #80]	; 0x50
 8000a58:	e047      	b.n	8000aea <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a5a:	6833      	ldr	r3, [r6, #0]
 8000a5c:	433b      	orrs	r3, r7
 8000a5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a60:	f7ff fd30 	bl	80004c4 <HAL_GetTick>
 8000a64:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a66:	6833      	ldr	r3, [r6, #0]
 8000a68:	423b      	tst	r3, r7
 8000a6a:	d1ed      	bne.n	8000a48 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a6c:	f7ff fd2a 	bl	80004c4 <HAL_GetTick>
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	1ac0      	subs	r0, r0, r3
 8000a74:	2864      	cmp	r0, #100	; 0x64
 8000a76:	d9f6      	bls.n	8000a66 <HAL_RCC_OscConfig+0x2fa>
 8000a78:	e6f9      	b.n	800086e <HAL_RCC_OscConfig+0x102>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	ffff1fff 	.word	0xffff1fff
 8000a84:	08001b78 	.word	0x08001b78
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	fffeffff 	.word	0xfffeffff
 8000a90:	fffbffff 	.word	0xfffbffff
 8000a94:	ffffe0ff 	.word	0xffffe0ff
 8000a98:	fffffeff 	.word	0xfffffeff
 8000a9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d116      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x366>
 8000aa4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000aa6:	4a60      	ldr	r2, [pc, #384]	; (8000c28 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa8:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aaa:	4013      	ands	r3, r2
 8000aac:	652b      	str	r3, [r5, #80]	; 0x50
 8000aae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ab0:	4a5e      	ldr	r2, [pc, #376]	; (8000c2c <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab2:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ab8:	f7ff fd04 	bl	80004c4 <HAL_GetTick>
 8000abc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000abe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ac0:	423b      	tst	r3, r7
 8000ac2:	d02a      	beq.n	8000b1a <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac4:	f7ff fcfe 	bl	80004c4 <HAL_GetTick>
 8000ac8:	4b59      	ldr	r3, [pc, #356]	; (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000aca:	1b80      	subs	r0, r0, r6
 8000acc:	4298      	cmp	r0, r3
 8000ace:	d9f6      	bls.n	8000abe <HAL_RCC_OscConfig+0x352>
 8000ad0:	e6cd      	b.n	800086e <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad2:	21a0      	movs	r1, #160	; 0xa0
 8000ad4:	00c9      	lsls	r1, r1, #3
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d10d      	bne.n	8000af6 <HAL_RCC_OscConfig+0x38a>
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	652b      	str	r3, [r5, #80]	; 0x50
 8000ae4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000aea:	f7ff fceb 	bl	80004c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aee:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000af0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af2:	00bf      	lsls	r7, r7, #2
 8000af4:	e00e      	b.n	8000b14 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000af8:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <HAL_RCC_OscConfig+0x4bc>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	652b      	str	r3, [r5, #80]	; 0x50
 8000afe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b00:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <HAL_RCC_OscConfig+0x4c0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	e7a7      	b.n	8000a56 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b06:	f7ff fcdd 	bl	80004c4 <HAL_GetTick>
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	1b80      	subs	r0, r0, r6
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	d900      	bls.n	8000b14 <HAL_RCC_OscConfig+0x3a8>
 8000b12:	e6ac      	b.n	800086e <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b16:	423b      	tst	r3, r7
 8000b18:	d0f5      	beq.n	8000b06 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000b1a:	9b00      	ldr	r3, [sp, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d000      	beq.n	8000b22 <HAL_RCC_OscConfig+0x3b6>
 8000b20:	e66f      	b.n	8000802 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b24:	4a43      	ldr	r2, [pc, #268]	; (8000c34 <HAL_RCC_OscConfig+0x4c8>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	63ab      	str	r3, [r5, #56]	; 0x38
 8000b2a:	e66a      	b.n	8000802 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b2c:	69a1      	ldr	r1, [r4, #24]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	4d41      	ldr	r5, [pc, #260]	; (8000c38 <HAL_RCC_OscConfig+0x4cc>)
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <HAL_RCC_OscConfig+0x4d0>)
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d018      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000b38:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b3a:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	60a9      	str	r1, [r5, #8]
 8000b40:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000b42:	430b      	orrs	r3, r1
 8000b44:	636b      	str	r3, [r5, #52]	; 0x34
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	6a11      	ldr	r1, [r2, #32]
 8000b4a:	019b      	lsls	r3, r3, #6
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b50:	f7ff fcb8 	bl	80004c4 <HAL_GetTick>
 8000b54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b56:	68ab      	ldr	r3, [r5, #8]
 8000b58:	4233      	tst	r3, r6
 8000b5a:	d000      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3f2>
 8000b5c:	e655      	b.n	800080a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b5e:	f7ff fcb1 	bl	80004c4 <HAL_GetTick>
 8000b62:	1bc0      	subs	r0, r0, r7
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9f6      	bls.n	8000b56 <HAL_RCC_OscConfig+0x3ea>
 8000b68:	e681      	b.n	800086e <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000b6a:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b6c:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000b6e:	4399      	bics	r1, r3
 8000b70:	60a9      	str	r1, [r5, #8]
 8000b72:	6a13      	ldr	r3, [r2, #32]
 8000b74:	4932      	ldr	r1, [pc, #200]	; (8000c40 <HAL_RCC_OscConfig+0x4d4>)
 8000b76:	400b      	ands	r3, r1
 8000b78:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b7a:	f7ff fca3 	bl	80004c4 <HAL_GetTick>
 8000b7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000b80:	68ab      	ldr	r3, [r5, #8]
 8000b82:	4233      	tst	r3, r6
 8000b84:	d100      	bne.n	8000b88 <HAL_RCC_OscConfig+0x41c>
 8000b86:	e640      	b.n	800080a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b88:	f7ff fc9c 	bl	80004c4 <HAL_GetTick>
 8000b8c:	1bc0      	subs	r0, r0, r7
 8000b8e:	2802      	cmp	r0, #2
 8000b90:	d9f6      	bls.n	8000b80 <HAL_RCC_OscConfig+0x414>
 8000b92:	e66c      	b.n	800086e <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b94:	220c      	movs	r2, #12
 8000b96:	4d28      	ldr	r5, [pc, #160]	; (8000c38 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000b98:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9a:	68eb      	ldr	r3, [r5, #12]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x438>
 8000ba2:	e64e      	b.n	8000842 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <HAL_RCC_OscConfig+0x4d8>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bac:	2902      	cmp	r1, #2
 8000bae:	d12b      	bne.n	8000c08 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fc88 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bb6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb8:	04b6      	lsls	r6, r6, #18
 8000bba:	682b      	ldr	r3, [r5, #0]
 8000bbc:	4233      	tst	r3, r6
 8000bbe:	d11d      	bne.n	8000bfc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bc4:	68ea      	ldr	r2, [r5, #12]
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	491f      	ldr	r1, [pc, #124]	; (8000c48 <HAL_RCC_OscConfig+0x4dc>)
 8000bca:	400a      	ands	r2, r1
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd0:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	682a      	ldr	r2, [r5, #0]
 8000bda:	045b      	lsls	r3, r3, #17
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000be0:	f7ff fc70 	bl	80004c4 <HAL_GetTick>
 8000be4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000be6:	04a4      	lsls	r4, r4, #18
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	4223      	tst	r3, r4
 8000bec:	d000      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x484>
 8000bee:	e610      	b.n	8000812 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf0:	f7ff fc68 	bl	80004c4 <HAL_GetTick>
 8000bf4:	1b80      	subs	r0, r0, r6
 8000bf6:	2802      	cmp	r0, #2
 8000bf8:	d9f6      	bls.n	8000be8 <HAL_RCC_OscConfig+0x47c>
 8000bfa:	e638      	b.n	800086e <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bfc:	f7ff fc62 	bl	80004c4 <HAL_GetTick>
 8000c00:	1bc0      	subs	r0, r0, r7
 8000c02:	2802      	cmp	r0, #2
 8000c04:	d9d9      	bls.n	8000bba <HAL_RCC_OscConfig+0x44e>
 8000c06:	e632      	b.n	800086e <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000c08:	f7ff fc5c 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0c:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c10:	04a4      	lsls	r4, r4, #18
 8000c12:	682b      	ldr	r3, [r5, #0]
 8000c14:	4223      	tst	r3, r4
 8000c16:	d100      	bne.n	8000c1a <HAL_RCC_OscConfig+0x4ae>
 8000c18:	e5fb      	b.n	8000812 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1a:	f7ff fc53 	bl	80004c4 <HAL_GetTick>
 8000c1e:	1b80      	subs	r0, r0, r6
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d9f6      	bls.n	8000c12 <HAL_RCC_OscConfig+0x4a6>
 8000c24:	e623      	b.n	800086e <HAL_RCC_OscConfig+0x102>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	fffffeff 	.word	0xfffffeff
 8000c2c:	fffffbff 	.word	0xfffffbff
 8000c30:	00001388 	.word	0x00001388
 8000c34:	efffffff 	.word	0xefffffff
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	ffffdfff 	.word	0xffffdfff
 8000c44:	feffffff 	.word	0xfeffffff
 8000c48:	ff02ffff 	.word	0xff02ffff

08000c4c <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000c4c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000c50:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000c52:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c54:	400a      	ands	r2, r1
 8000c56:	2a08      	cmp	r2, #8
 8000c58:	d026      	beq.n	8000ca8 <HAL_RCC_GetSysClockFreq+0x5c>
 8000c5a:	2a0c      	cmp	r2, #12
 8000c5c:	d006      	beq.n	8000c6c <HAL_RCC_GetSysClockFreq+0x20>
 8000c5e:	2a04      	cmp	r2, #4
 8000c60:	d11a      	bne.n	8000c98 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	06db      	lsls	r3, r3, #27
 8000c66:	d421      	bmi.n	8000cac <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000c6a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c6c:	028a      	lsls	r2, r1, #10
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c70:	0f12      	lsrs	r2, r2, #28
 8000c72:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c74:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c76:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000c78:	0f89      	lsrs	r1, r1, #30
 8000c7a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c7c:	03c0      	lsls	r0, r0, #15
 8000c7e:	d504      	bpl.n	8000c8a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000c80:	480e      	ldr	r0, [pc, #56]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c82:	4350      	muls	r0, r2
 8000c84:	f7ff fa5c 	bl	8000140 <__udivsi3>
 8000c88:	e7ef      	b.n	8000c6a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	06db      	lsls	r3, r3, #27
 8000c8e:	d501      	bpl.n	8000c94 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000c92:	e7f6      	b.n	8000c82 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c96:	e7f4      	b.n	8000c82 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000c98:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c9a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000c9c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	4098      	lsls	r0, r3
 8000ca6:	e7e0      	b.n	8000c6a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x70>)
 8000caa:	e7de      	b.n	8000c6a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000cae:	e7dc      	b.n	8000c6a <HAL_RCC_GetSysClockFreq+0x1e>
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	00f42400 	.word	0x00f42400
 8000cb8:	08001b90 	.word	0x08001b90
 8000cbc:	007a1200 	.word	0x007a1200
 8000cc0:	003d0900 	.word	0x003d0900

08000cc4 <HAL_RCC_ClockConfig>:
{
 8000cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4c53      	ldr	r4, [pc, #332]	; (8000e18 <HAL_RCC_ClockConfig+0x154>)
{
 8000cca:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ccc:	6823      	ldr	r3, [r4, #0]
{
 8000cce:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d328      	bcc.n	8000d28 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd6:	6832      	ldr	r2, [r6, #0]
 8000cd8:	0793      	lsls	r3, r2, #30
 8000cda:	d431      	bmi.n	8000d40 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cdc:	07d3      	lsls	r3, r2, #31
 8000cde:	d437      	bmi.n	8000d50 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	6822      	ldr	r2, [r4, #0]
 8000ce4:	9901      	ldr	r1, [sp, #4]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d200      	bcs.n	8000cee <HAL_RCC_ClockConfig+0x2a>
 8000cec:	e085      	b.n	8000dfa <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cee:	6832      	ldr	r2, [r6, #0]
 8000cf0:	4c4a      	ldr	r4, [pc, #296]	; (8000e1c <HAL_RCC_ClockConfig+0x158>)
 8000cf2:	0753      	lsls	r3, r2, #29
 8000cf4:	d500      	bpl.n	8000cf8 <HAL_RCC_ClockConfig+0x34>
 8000cf6:	e087      	b.n	8000e08 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf8:	0713      	lsls	r3, r2, #28
 8000cfa:	d506      	bpl.n	8000d0a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cfc:	68e2      	ldr	r2, [r4, #12]
 8000cfe:	6933      	ldr	r3, [r6, #16]
 8000d00:	4947      	ldr	r1, [pc, #284]	; (8000e20 <HAL_RCC_ClockConfig+0x15c>)
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	400a      	ands	r2, r1
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d0a:	f7ff ff9f 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <HAL_RCC_ClockConfig+0x160>)
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	0f1b      	lsrs	r3, r3, #28
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <HAL_RCC_ClockConfig+0x164>)
 8000d1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fba4 	bl	800046c <HAL_InitTick>
  return HAL_OK;
 8000d24:	2000      	movs	r0, #0
 8000d26:	e00a      	b.n	8000d3e <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	9901      	ldr	r1, [sp, #4]
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	4013      	ands	r3, r2
 8000d36:	9a01      	ldr	r2, [sp, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d0cc      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d3c:	2001      	movs	r0, #1
}
 8000d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d40:	20f0      	movs	r0, #240	; 0xf0
 8000d42:	4936      	ldr	r1, [pc, #216]	; (8000e1c <HAL_RCC_ClockConfig+0x158>)
 8000d44:	68cb      	ldr	r3, [r1, #12]
 8000d46:	4383      	bics	r3, r0
 8000d48:	68b0      	ldr	r0, [r6, #8]
 8000d4a:	4303      	orrs	r3, r0
 8000d4c:	60cb      	str	r3, [r1, #12]
 8000d4e:	e7c5      	b.n	8000cdc <HAL_RCC_ClockConfig+0x18>
 8000d50:	4d32      	ldr	r5, [pc, #200]	; (8000e1c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d54:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d56:	2a02      	cmp	r2, #2
 8000d58:	d119      	bne.n	8000d8e <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	039b      	lsls	r3, r3, #14
 8000d5c:	d5ee      	bpl.n	8000d3c <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d5e:	2103      	movs	r1, #3
 8000d60:	68eb      	ldr	r3, [r5, #12]
 8000d62:	438b      	bics	r3, r1
 8000d64:	4313      	orrs	r3, r2
 8000d66:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d68:	f7ff fbac 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d6e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d119      	bne.n	8000da8 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d74:	220c      	movs	r2, #12
 8000d76:	68eb      	ldr	r3, [r5, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d0b0      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7e:	f7ff fba1 	bl	80004c4 <HAL_GetTick>
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000d84:	1bc0      	subs	r0, r0, r7
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d9f4      	bls.n	8000d74 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	e7d7      	b.n	8000d3e <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d8e:	2a03      	cmp	r2, #3
 8000d90:	d102      	bne.n	8000d98 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d92:	019b      	lsls	r3, r3, #6
 8000d94:	d4e3      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0x9a>
 8000d96:	e7d1      	b.n	8000d3c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d98:	2a01      	cmp	r2, #1
 8000d9a:	d102      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9c:	075b      	lsls	r3, r3, #29
 8000d9e:	d4de      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0x9a>
 8000da0:	e7cc      	b.n	8000d3c <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000da2:	059b      	lsls	r3, r3, #22
 8000da4:	d4db      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0x9a>
 8000da6:	e7c9      	b.n	8000d3c <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d10c      	bne.n	8000dc6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dac:	220c      	movs	r2, #12
 8000dae:	68eb      	ldr	r3, [r5, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d100      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xf4>
 8000db6:	e793      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db8:	f7ff fb84 	bl	80004c4 <HAL_GetTick>
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000dbe:	1bc0      	subs	r0, r0, r7
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d9f3      	bls.n	8000dac <HAL_RCC_ClockConfig+0xe8>
 8000dc4:	e7e1      	b.n	8000d8a <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d011      	beq.n	8000dee <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	68eb      	ldr	r3, [r5, #12]
 8000dce:	4213      	tst	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <HAL_RCC_ClockConfig+0x110>
 8000dd2:	e785      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd4:	f7ff fb76 	bl	80004c4 <HAL_GetTick>
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000dda:	1bc0      	subs	r0, r0, r7
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	d9f4      	bls.n	8000dca <HAL_RCC_ClockConfig+0x106>
 8000de0:	e7d3      	b.n	8000d8a <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000de2:	f7ff fb6f 	bl	80004c4 <HAL_GetTick>
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_RCC_ClockConfig+0x168>)
 8000de8:	1bc0      	subs	r0, r0, r7
 8000dea:	4298      	cmp	r0, r3
 8000dec:	d8cd      	bhi.n	8000d8a <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dee:	220c      	movs	r2, #12
 8000df0:	68eb      	ldr	r3, [r5, #12]
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d1f4      	bne.n	8000de2 <HAL_RCC_ClockConfig+0x11e>
 8000df8:	e772      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfa:	6822      	ldr	r2, [r4, #0]
 8000dfc:	439a      	bics	r2, r3
 8000dfe:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e00:	6822      	ldr	r2, [r4, #0]
 8000e02:	421a      	tst	r2, r3
 8000e04:	d19a      	bne.n	8000d3c <HAL_RCC_ClockConfig+0x78>
 8000e06:	e772      	b.n	8000cee <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e08:	68e3      	ldr	r3, [r4, #12]
 8000e0a:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_RCC_ClockConfig+0x16c>)
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	68f1      	ldr	r1, [r6, #12]
 8000e10:	430b      	orrs	r3, r1
 8000e12:	60e3      	str	r3, [r4, #12]
 8000e14:	e770      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x34>
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	ffffc7ff 	.word	0xffffc7ff
 8000e24:	08001b78 	.word	0x08001b78
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	00001388 	.word	0x00001388
 8000e30:	fffff8ff 	.word	0xfffff8ff

08000e34 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000e34:	4b01      	ldr	r3, [pc, #4]	; (8000e3c <HAL_RCC_GetHCLKFreq+0x8>)
 8000e36:	6818      	ldr	r0, [r3, #0]
}
 8000e38:	4770      	bx	lr
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	055b      	lsls	r3, r3, #21
 8000e48:	0f5b      	lsrs	r3, r3, #29
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e4e:	6810      	ldr	r0, [r2, #0]
 8000e50:	40d8      	lsrs	r0, r3
}    
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	08001b88 	.word	0x08001b88
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	049b      	lsls	r3, r3, #18
 8000e68:	0f5b      	lsrs	r3, r3, #29
 8000e6a:	5cd3      	ldrb	r3, [r2, r3]
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e6e:	6810      	ldr	r0, [r2, #0]
 8000e70:	40d8      	lsrs	r0, r3
} 
 8000e72:	4770      	bx	lr
 8000e74:	40021000 	.word	0x40021000
 8000e78:	08001b88 	.word	0x08001b88
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e80:	2382      	movs	r3, #130	; 0x82
{
 8000e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e84:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e86:	011b      	lsls	r3, r3, #4
{
 8000e88:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8000e8a:	421a      	tst	r2, r3
 8000e8c:	d047      	beq.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e90:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e92:	4c5f      	ldr	r4, [pc, #380]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000e94:	055b      	lsls	r3, r3, #21
 8000e96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000e98:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	421a      	tst	r2, r3
 8000e9c:	d104      	bne.n	8000ea8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	2780      	movs	r7, #128	; 0x80
 8000eaa:	4e5a      	ldr	r6, [pc, #360]	; (8001014 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8000eac:	007f      	lsls	r7, r7, #1
 8000eae:	6833      	ldr	r3, [r6, #0]
 8000eb0:	423b      	tst	r3, r7
 8000eb2:	d06d      	beq.n	8000f90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000eb4:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000eb6:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000eb8:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	0392      	lsls	r2, r2, #14
 8000ebe:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ec0:	4010      	ands	r0, r2
 8000ec2:	4283      	cmp	r3, r0
 8000ec4:	d103      	bne.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000ec6:	68a8      	ldr	r0, [r5, #8]
 8000ec8:	4002      	ands	r2, r0
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d009      	beq.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ece:	23c0      	movs	r3, #192	; 0xc0
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d103      	bne.n	8000ee2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8000eda:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8000edc:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ede:	039b      	lsls	r3, r3, #14
 8000ee0:	d466      	bmi.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000ee2:	22c0      	movs	r2, #192	; 0xc0
 8000ee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ee6:	0292      	lsls	r2, r2, #10
 8000ee8:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000eea:	d162      	bne.n	8000fb2 <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000eec:	6869      	ldr	r1, [r5, #4]
 8000eee:	23c0      	movs	r3, #192	; 0xc0
 8000ef0:	000a      	movs	r2, r1
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d107      	bne.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	4846      	ldr	r0, [pc, #280]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8000efe:	4003      	ands	r3, r0
 8000f00:	20c0      	movs	r0, #192	; 0xc0
 8000f02:	0380      	lsls	r0, r0, #14
 8000f04:	4001      	ands	r1, r0
 8000f06:	430b      	orrs	r3, r1
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f0c:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f0e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000f10:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d103      	bne.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f18:	4a40      	ldr	r2, [pc, #256]	; (800101c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	07da      	lsls	r2, r3, #31
 8000f22:	d506      	bpl.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f24:	2003      	movs	r0, #3
 8000f26:	493a      	ldr	r1, [pc, #232]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f28:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f2a:	4382      	bics	r2, r0
 8000f2c:	68e8      	ldr	r0, [r5, #12]
 8000f2e:	4302      	orrs	r2, r0
 8000f30:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f32:	079a      	lsls	r2, r3, #30
 8000f34:	d506      	bpl.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f36:	200c      	movs	r0, #12
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f3a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f3c:	4382      	bics	r2, r0
 8000f3e:	6928      	ldr	r0, [r5, #16]
 8000f40:	4302      	orrs	r2, r0
 8000f42:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f44:	075a      	lsls	r2, r3, #29
 8000f46:	d506      	bpl.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f48:	4931      	ldr	r1, [pc, #196]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f4c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f4e:	4002      	ands	r2, r0
 8000f50:	6968      	ldr	r0, [r5, #20]
 8000f52:	4302      	orrs	r2, r0
 8000f54:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f56:	071a      	lsls	r2, r3, #28
 8000f58:	d506      	bpl.n	8000f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f5a:	492d      	ldr	r1, [pc, #180]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f5c:	4831      	ldr	r0, [pc, #196]	; (8001024 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000f5e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f60:	4002      	ands	r2, r0
 8000f62:	69a8      	ldr	r0, [r5, #24]
 8000f64:	4302      	orrs	r2, r0
 8000f66:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f68:	065a      	lsls	r2, r3, #25
 8000f6a:	d506      	bpl.n	8000f7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f6c:	4928      	ldr	r1, [pc, #160]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f6e:	482e      	ldr	r0, [pc, #184]	; (8001028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f70:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f72:	4002      	ands	r2, r0
 8000f74:	6a28      	ldr	r0, [r5, #32]
 8000f76:	4302      	orrs	r2, r0
 8000f78:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f7a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	d517      	bpl.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f82:	492a      	ldr	r1, [pc, #168]	; (800102c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000f84:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000f86:	400b      	ands	r3, r1
 8000f88:	69e9      	ldr	r1, [r5, #28]
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	e00f      	b.n	8000fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f90:	6833      	ldr	r3, [r6, #0]
 8000f92:	433b      	orrs	r3, r7
 8000f94:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f96:	f7ff fa95 	bl	80004c4 <HAL_GetTick>
 8000f9a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	6833      	ldr	r3, [r6, #0]
 8000f9e:	423b      	tst	r3, r7
 8000fa0:	d188      	bne.n	8000eb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fa2:	f7ff fa8f 	bl	80004c4 <HAL_GetTick>
 8000fa6:	9b01      	ldr	r3, [sp, #4]
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	2864      	cmp	r0, #100	; 0x64
 8000fac:	d9f6      	bls.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
}
 8000fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d002      	beq.n	8000fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fb8:	6829      	ldr	r1, [r5, #0]
 8000fba:	0689      	lsls	r1, r1, #26
 8000fbc:	d408      	bmi.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000fbe:	68a9      	ldr	r1, [r5, #8]
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d100      	bne.n	8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8000fc6:	e791      	b.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	051b      	lsls	r3, r3, #20
 8000fcc:	d400      	bmi.n	8000fd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8000fce:	e78d      	b.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fd0:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fd2:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fd4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fd6:	0312      	lsls	r2, r2, #12
 8000fd8:	4302      	orrs	r2, r0
 8000fda:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fdc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fe2:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fe4:	4002      	ands	r2, r0
 8000fe6:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000fe8:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000fea:	05cb      	lsls	r3, r1, #23
 8000fec:	d400      	bmi.n	8000ff0 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8000fee:	e77d      	b.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fa68 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ff6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff8:	00bf      	lsls	r7, r7, #2
 8000ffa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ffc:	423b      	tst	r3, r7
 8000ffe:	d000      	beq.n	8001002 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001000:	e774      	b.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fa5f 	bl	80004c4 <HAL_GetTick>
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001008:	1b80      	subs	r0, r0, r6
 800100a:	4298      	cmp	r0, r3
 800100c:	d9f5      	bls.n	8000ffa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800100e:	e7ce      	b.n	8000fae <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001010:	40021000 	.word	0x40021000
 8001014:	40007000 	.word	0x40007000
 8001018:	ffcfffff 	.word	0xffcfffff
 800101c:	efffffff 	.word	0xefffffff
 8001020:	fffff3ff 	.word	0xfffff3ff
 8001024:	ffffcfff 	.word	0xffffcfff
 8001028:	fbffffff 	.word	0xfbffffff
 800102c:	fff3ffff 	.word	0xfff3ffff
 8001030:	fffcffff 	.word	0xfffcffff
 8001034:	fff7ffff 	.word	0xfff7ffff
 8001038:	00001388 	.word	0x00001388

0800103c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800103c:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800103e:	2808      	cmp	r0, #8
 8001040:	d100      	bne.n	8001044 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8001042:	e0b5      	b.n	80011b0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8001044:	d810      	bhi.n	8001068 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8001046:	2802      	cmp	r0, #2
 8001048:	d100      	bne.n	800104c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800104a:	e087      	b.n	800115c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800104c:	2804      	cmp	r0, #4
 800104e:	d100      	bne.n	8001052 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8001050:	e094      	b.n	800117c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8001052:	2801      	cmp	r0, #1
 8001054:	d10e      	bne.n	8001074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8001056:	2103      	movs	r1, #3
 8001058:	4a62      	ldr	r2, [pc, #392]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800105a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800105c:	400b      	ands	r3, r1

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800105e:	d000      	beq.n	8001062 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8001060:	e06b      	b.n	800113a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 8001062:	f7ff fefd 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
 8001066:	e024      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
  switch (PeriphClk)
 8001068:	2820      	cmp	r0, #32
 800106a:	d00b      	beq.n	8001084 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 800106c:	d804      	bhi.n	8001078 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800106e:	2810      	cmp	r0, #16
 8001070:	d100      	bne.n	8001074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001072:	e0ad      	b.n	80011d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001074:	2000      	movs	r0, #0
 8001076:	e01c      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
  switch (PeriphClk)
 8001078:	2840      	cmp	r0, #64	; 0x40
 800107a:	d036      	beq.n	80010ea <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4298      	cmp	r0, r3
 8001082:	d1f7      	bne.n	8001074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001084:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001086:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 8001088:	4956      	ldr	r1, [pc, #344]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800108a:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 800108c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800108e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001090:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001092:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8001094:	4282      	cmp	r2, r0
 8001096:	d103      	bne.n	80010a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8001098:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 800109a:	0fc0      	lsrs	r0, r0, #31
 800109c:	03c0      	lsls	r0, r0, #15
 800109e:	e008      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	02a4      	lsls	r4, r4, #10
 80010a4:	42a2      	cmp	r2, r4
 80010a6:	d105      	bne.n	80010b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 80010a8:	2002      	movs	r0, #2
 80010aa:	4003      	ands	r3, r0
            frequency = 0U;
 80010ac:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80010ae:	d000      	beq.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = LSI_VALUE;
 80010b0:	484d      	ldr	r0, [pc, #308]	; (80011e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
    {
      break;
    }
  }
  return(frequency);
}
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 80010b4:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80010b6:	42aa      	cmp	r2, r5
 80010b8:	d1fb      	bne.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80010ba:	680b      	ldr	r3, [r1, #0]
 80010bc:	4223      	tst	r3, r4
 80010be:	d0f8      	beq.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80010c0:	22c0      	movs	r2, #192	; 0xc0
 80010c2:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 80010c4:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80010c6:	0392      	lsls	r2, r2, #14
 80010c8:	4013      	ands	r3, r2
        switch (clkprediv)
 80010ca:	0389      	lsls	r1, r1, #14
 80010cc:	428b      	cmp	r3, r1
 80010ce:	d008      	beq.n	80010e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80010d4:	e084      	b.n	80011e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	0352      	lsls	r2, r2, #13
 80010da:	4293      	cmp	r3, r2
 80010dc:	d103      	bne.n	80010e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            frequency = HSE_VALUE / 4U;
 80010de:	4843      	ldr	r0, [pc, #268]	; (80011ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>)
            break;
 80010e0:	e7e7      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSE_VALUE / 8U;
 80010e2:	4843      	ldr	r0, [pc, #268]	; (80011f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80010e4:	e7e5      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSE_VALUE / 2U;
 80010e6:	4843      	ldr	r0, [pc, #268]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
            break;
 80010e8:	e7e3      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80010ea:	2080      	movs	r0, #128	; 0x80
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80010ee:	04c0      	lsls	r0, r0, #19
 80010f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f2:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80010f4:	d11a      	bne.n	800112c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	0192      	lsls	r2, r2, #6
 80010fa:	d5da      	bpl.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80010fc:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 80010fe:	483e      	ldr	r0, [pc, #248]	; (80011f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001100:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001102:	0292      	lsls	r2, r2, #10
 8001104:	0f12      	lsrs	r2, r2, #28
 8001106:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8001108:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 800110a:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 800110c:	0f89      	lsrs	r1, r1, #30
 800110e:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001110:	03d2      	lsls	r2, r2, #15
 8001112:	d407      	bmi.n	8001124 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	06db      	lsls	r3, r3, #27
 8001118:	d406      	bmi.n	8001128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
                    pllvco =  HSI_VALUE;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
            pllvco = (pllvco * pllmul);
 800111c:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 800111e:	f7ff f80f 	bl	8000140 <__udivsi3>
 8001122:	e7c6      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
                pllvco = HSE_VALUE;
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8001126:	e7f9      	b.n	800111c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
                    pllvco =  (HSI_VALUE >> 2U);
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800112a:	e7f7      	b.n	800111c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 800112c:	2202      	movs	r2, #2
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4013      	ands	r3, r2
            frequency = 0U;
 8001132:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8001134:	d0bd      	beq.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = HSI48_VALUE;
 8001136:	4833      	ldr	r0, [pc, #204]	; (8001204 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8001138:	e7bb      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800113a:	2b02      	cmp	r3, #2
 800113c:	d103      	bne.n	8001146 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800113e:	6813      	ldr	r3, [r2, #0]
 8001140:	2204      	movs	r2, #4
 8001142:	4013      	ands	r3, r2
 8001144:	e026      	b.n	8001194 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        frequency = HAL_RCC_GetSysClockFreq();
 800114a:	f7ff fd7f 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 800114e:	e7b0      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
            frequency = 0U;
 8001150:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001152:	2b03      	cmp	r3, #3
 8001154:	d1ad      	bne.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8001156:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8001158:	0580      	lsls	r0, r0, #22
 800115a:	e79e      	b.n	800109a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800115c:	210c      	movs	r1, #12
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001160:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001162:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8001164:	d102      	bne.n	800116c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001166:	f7ff fe6b 	bl	8000e40 <HAL_RCC_GetPCLK1Freq>
 800116a:	e7a2      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800116c:	2b08      	cmp	r3, #8
 800116e:	d0e6      	beq.n	800113e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8001170:	2b04      	cmp	r3, #4
 8001172:	d0ea      	beq.n	800114a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
            frequency = 0U;
 8001174:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001176:	2b0c      	cmp	r3, #12
 8001178:	d19b      	bne.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800117a:	e7ec      	b.n	8001156 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800117c:	21c0      	movs	r1, #192	; 0xc0
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8001180:	0109      	lsls	r1, r1, #4
 8001182:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001184:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8001186:	d0ee      	beq.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001188:	2480      	movs	r4, #128	; 0x80
 800118a:	0124      	lsls	r4, r4, #4
 800118c:	42a3      	cmp	r3, r4
 800118e:	d106      	bne.n	800119e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	4003      	ands	r3, r0
            frequency = 0U;
 8001194:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001196:	d100      	bne.n	800119a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001198:	e78b      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        frequency = HSI_VALUE;
 800119a:	4818      	ldr	r0, [pc, #96]	; (80011fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800119c:	e789      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800119e:	2080      	movs	r0, #128	; 0x80
 80011a0:	00c0      	lsls	r0, r0, #3
 80011a2:	4283      	cmp	r3, r0
 80011a4:	d0d1      	beq.n	800114a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
            frequency = 0U;
 80011a6:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d000      	beq.n	80011ae <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 80011ac:	e781      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011ae:	e7d2      	b.n	8001156 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80011b0:	21c0      	movs	r1, #192	; 0xc0
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80011b4:	0189      	lsls	r1, r1, #6
 80011b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80011b8:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80011ba:	d0d4      	beq.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0189      	lsls	r1, r1, #6
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d0bc      	beq.n	800113e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0152      	lsls	r2, r2, #5
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d000      	beq.n	80011ce <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 80011cc:	e752      	b.n	8001074 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80011ce:	e7bc      	b.n	800114a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80011d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	03db      	lsls	r3, r3, #15
 80011d8:	4018      	ands	r0, r3
 80011da:	d100      	bne.n	80011de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80011dc:	e769      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011de:	e7c2      	b.n	8001166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = HSE_VALUE / 16U;
 80011e0:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80011e2:	e766      	b.n	80010b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 80011e4:	40021000 	.word	0x40021000
 80011e8:	00009088 	.word	0x00009088
 80011ec:	001e8480 	.word	0x001e8480
 80011f0:	000f4240 	.word	0x000f4240
 80011f4:	003d0900 	.word	0x003d0900
 80011f8:	08001b90 	.word	0x08001b90
 80011fc:	00f42400 	.word	0x00f42400
 8001200:	007a1200 	.word	0x007a1200
 8001204:	02dc6c00 	.word	0x02dc6c00
 8001208:	0007a120 	.word	0x0007a120

0800120c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120e:	0005      	movs	r5, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001210:	6803      	ldr	r3, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001212:	6882      	ldr	r2, [r0, #8]
 8001214:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001216:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001218:	4302      	orrs	r2, r0
 800121a:	6968      	ldr	r0, [r5, #20]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800121c:	4e7e      	ldr	r6, [pc, #504]	; (8001418 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800121e:	4302      	orrs	r2, r0
 8001220:	69e8      	ldr	r0, [r5, #28]
 8001222:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001224:	487d      	ldr	r0, [pc, #500]	; (800141c <UART_SetConfig+0x210>)
 8001226:	4001      	ands	r1, r0
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	497c      	ldr	r1, [pc, #496]	; (8001420 <UART_SetConfig+0x214>)
 8001230:	400a      	ands	r2, r1
 8001232:	68e9      	ldr	r1, [r5, #12]
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001238:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800123a:	42b3      	cmp	r3, r6
 800123c:	d001      	beq.n	8001242 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800123e:	6a2a      	ldr	r2, [r5, #32]
 8001240:	4311      	orrs	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4877      	ldr	r0, [pc, #476]	; (8001424 <UART_SetConfig+0x218>)
 8001246:	4002      	ands	r2, r0
 8001248:	430a      	orrs	r2, r1
 800124a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800124c:	4a76      	ldr	r2, [pc, #472]	; (8001428 <UART_SetConfig+0x21c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d117      	bne.n	8001282 <UART_SetConfig+0x76>
 8001252:	2203      	movs	r2, #3
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <UART_SetConfig+0x220>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4013      	ands	r3, r2
 800125a:	4a75      	ldr	r2, [pc, #468]	; (8001430 <UART_SetConfig+0x224>)
 800125c:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800125e:	2002      	movs	r0, #2
 8001260:	f7ff feec 	bl	800103c <HAL_RCCEx_GetPeriphCLKFreq>

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8001264:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8001266:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8001268:	42b7      	cmp	r7, r6
 800126a:	d15f      	bne.n	800132c <UART_SetConfig+0x120>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;

    switch (clocksource)
 800126c:	2c08      	cmp	r4, #8
 800126e:	d900      	bls.n	8001272 <UART_SetConfig+0x66>
 8001270:	e0d0      	b.n	8001414 <UART_SetConfig+0x208>
 8001272:	0020      	movs	r0, r4
 8001274:	f7fe ff5a 	bl	800012c <__gnu_thumb1_case_uqi>
 8001278:	ce32ce2a 	.word	0xce32ce2a
 800127c:	cecece52 	.word	0xcecece52
 8001280:	55          	.byte	0x55
 8001281:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001282:	4a6c      	ldr	r2, [pc, #432]	; (8001434 <UART_SetConfig+0x228>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d105      	bne.n	8001294 <UART_SetConfig+0x88>
 8001288:	220c      	movs	r2, #12
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <UART_SetConfig+0x220>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4013      	ands	r3, r2
 8001290:	4a69      	ldr	r2, [pc, #420]	; (8001438 <UART_SetConfig+0x22c>)
 8001292:	e7e3      	b.n	800125c <UART_SetConfig+0x50>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001294:	2410      	movs	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001296:	42b3      	cmp	r3, r6
 8001298:	d1e1      	bne.n	800125e <UART_SetConfig+0x52>
 800129a:	22c0      	movs	r2, #192	; 0xc0
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <UART_SetConfig+0x220>)
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	00c9      	lsls	r1, r1, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	3c0c      	subs	r4, #12
 80012aa:	428b      	cmp	r3, r1
 80012ac:	d0d7      	beq.n	800125e <UART_SetConfig+0x52>
 80012ae:	d804      	bhi.n	80012ba <UART_SetConfig+0xae>
 80012b0:	2400      	movs	r4, #0
 80012b2:	42a3      	cmp	r3, r4
 80012b4:	d0d3      	beq.n	800125e <UART_SetConfig+0x52>
 80012b6:	2410      	movs	r4, #16
 80012b8:	e7d1      	b.n	800125e <UART_SetConfig+0x52>
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	2402      	movs	r4, #2
 80012be:	0109      	lsls	r1, r1, #4
 80012c0:	428b      	cmp	r3, r1
 80012c2:	d0cc      	beq.n	800125e <UART_SetConfig+0x52>
 80012c4:	3406      	adds	r4, #6
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d0c9      	beq.n	800125e <UART_SetConfig+0x52>
 80012ca:	e7f4      	b.n	80012b6 <UART_SetConfig+0xaa>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 80012cc:	f7ff fdb8 	bl	8000e40 <HAL_RCC_GetPCLK1Freq>
 80012d0:	2400      	movs	r4, #0
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80012d2:	0003      	movs	r3, r0
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 80012d4:	42a0      	cmp	r0, r4
 80012d6:	d106      	bne.n	80012e6 <UART_SetConfig+0xda>
    }
  }

  return ret;

}
 80012d8:	0020      	movs	r0, r4
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <UART_SetConfig+0x220>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	06db      	lsls	r3, r3, #27
 80012e2:	d421      	bmi.n	8001328 <UART_SetConfig+0x11c>
        tmpreg = (uint32_t) HSI_VALUE;
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <UART_SetConfig+0x230>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80012e6:	2103      	movs	r1, #3
 80012e8:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 80012ea:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80012ec:	4351      	muls	r1, r2
 80012ee:	4299      	cmp	r1, r3
 80012f0:	d8f2      	bhi.n	80012d8 <UART_SetConfig+0xcc>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 80012f2:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80012f4:	4299      	cmp	r1, r3
 80012f6:	d3ef      	bcc.n	80012d8 <UART_SetConfig+0xcc>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 80012f8:	2700      	movs	r7, #0
 80012fa:	0856      	lsrs	r6, r2, #1
 80012fc:	0e19      	lsrs	r1, r3, #24
 80012fe:	0218      	lsls	r0, r3, #8
 8001300:	1980      	adds	r0, r0, r6
 8001302:	4179      	adcs	r1, r7
 8001304:	003b      	movs	r3, r7
 8001306:	f7fe ffa7 	bl	8000258 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800130a:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <UART_SetConfig+0x234>)
 800130c:	18c2      	adds	r2, r0, r3
 800130e:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <UART_SetConfig+0x238>)
 8001310:	429a      	cmp	r2, r3
 8001312:	d8e1      	bhi.n	80012d8 <UART_SetConfig+0xcc>
           huart->Instance->BRR = tmpreg;
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001318:	2400      	movs	r4, #0
      break;
 800131a:	e7dd      	b.n	80012d8 <UART_SetConfig+0xcc>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800131c:	f7ff fc96 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 8001320:	e7d6      	b.n	80012d0 <UART_SetConfig+0xc4>
      tmpreg = (uint32_t) LSE_VALUE;
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	e7de      	b.n	80012e6 <UART_SetConfig+0xda>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8001328:	4b47      	ldr	r3, [pc, #284]	; (8001448 <UART_SetConfig+0x23c>)
 800132a:	e7dc      	b.n	80012e6 <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	69e9      	ldr	r1, [r5, #28]
 8001330:	0212      	lsls	r2, r2, #8
 8001332:	4291      	cmp	r1, r2
 8001334:	d13f      	bne.n	80013b6 <UART_SetConfig+0x1aa>
    switch (clocksource)
 8001336:	2c08      	cmp	r4, #8
 8001338:	d83a      	bhi.n	80013b0 <UART_SetConfig+0x1a4>
 800133a:	0020      	movs	r0, r4
 800133c:	f7fe fef6 	bl	800012c <__gnu_thumb1_case_uqi>
 8001340:	38170f05 	.word	0x38170f05
 8001344:	38383830 	.word	0x38383830
 8001348:	33          	.byte	0x33
 8001349:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800134a:	686a      	ldr	r2, [r5, #4]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	0011      	movs	r1, r2
 8001350:	0850      	lsrs	r0, r2, #1
 8001352:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001354:	f7fe fef4 	bl	8000140 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001358:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800135a:	b280      	uxth	r0, r0
      break;
 800135c:	e016      	b.n	800138c <UART_SetConfig+0x180>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800135e:	f7ff fd7f 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001362:	686b      	ldr	r3, [r5, #4]
 8001364:	0040      	lsls	r0, r0, #1
 8001366:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001368:	18c0      	adds	r0, r0, r3
 800136a:	6869      	ldr	r1, [r5, #4]
 800136c:	e7f2      	b.n	8001354 <UART_SetConfig+0x148>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <UART_SetConfig+0x220>)
 8001370:	6869      	ldr	r1, [r5, #4]
 8001372:	681c      	ldr	r4, [r3, #0]
 8001374:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001376:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001378:	401c      	ands	r4, r3
 800137a:	d002      	beq.n	8001382 <UART_SetConfig+0x176>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <UART_SetConfig+0x240>)
 800137e:	18c0      	adds	r0, r0, r3
 8001380:	e7e8      	b.n	8001354 <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <UART_SetConfig+0x244>)
 8001384:	18c0      	adds	r0, r0, r3
 8001386:	f7fe fedb 	bl	8000140 <__udivsi3>
 800138a:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 800138c:	230f      	movs	r3, #15
 800138e:	0002      	movs	r2, r0
 8001390:	439a      	bics	r2, r3
 8001392:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001394:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8001396:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8001398:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 800139a:	4318      	orrs	r0, r3
 800139c:	60d0      	str	r0, [r2, #12]
 800139e:	e79b      	b.n	80012d8 <UART_SetConfig+0xcc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80013a0:	f7ff fc54 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 80013a4:	e7dd      	b.n	8001362 <UART_SetConfig+0x156>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013a6:	686b      	ldr	r3, [r5, #4]
 80013a8:	0858      	lsrs	r0, r3, #1
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	e7db      	b.n	8001368 <UART_SetConfig+0x15c>
        ret = HAL_ERROR;
 80013b0:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 80013b2:	2000      	movs	r0, #0
 80013b4:	e7ea      	b.n	800138c <UART_SetConfig+0x180>
    switch (clocksource)
 80013b6:	2c08      	cmp	r4, #8
 80013b8:	d82c      	bhi.n	8001414 <UART_SetConfig+0x208>
 80013ba:	0020      	movs	r0, r4
 80013bc:	f7fe feb6 	bl	800012c <__gnu_thumb1_case_uqi>
 80013c0:	2a120f05 	.word	0x2a120f05
 80013c4:	2a2a2a22 	.word	0x2a2a2a22
 80013c8:	25          	.byte	0x25
 80013c9:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013ca:	f7ff fd39 	bl	8000e40 <HAL_RCC_GetPCLK1Freq>
 80013ce:	6869      	ldr	r1, [r5, #4]
 80013d0:	084b      	lsrs	r3, r1, #1
 80013d2:	1818      	adds	r0, r3, r0
 80013d4:	f7fe feb4 	bl	8000140 <__udivsi3>
 80013d8:	b280      	uxth	r0, r0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	e79c      	b.n	8001318 <UART_SetConfig+0x10c>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80013de:	f7ff fd3f 	bl	8000e60 <HAL_RCC_GetPCLK2Freq>
 80013e2:	e7f4      	b.n	80013ce <UART_SetConfig+0x1c2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <UART_SetConfig+0x220>)
 80013e6:	6869      	ldr	r1, [r5, #4]
 80013e8:	681c      	ldr	r4, [r3, #0]
 80013ea:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013ec:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013ee:	401c      	ands	r4, r3
 80013f0:	d001      	beq.n	80013f6 <UART_SetConfig+0x1ea>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <UART_SetConfig+0x23c>)
 80013f4:	e7ed      	b.n	80013d2 <UART_SetConfig+0x1c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <UART_SetConfig+0x230>)
 80013f8:	18c0      	adds	r0, r0, r3
 80013fa:	f7fe fea1 	bl	8000140 <__udivsi3>
 80013fe:	b280      	uxth	r0, r0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	e769      	b.n	80012d8 <UART_SetConfig+0xcc>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001404:	f7ff fc22 	bl	8000c4c <HAL_RCC_GetSysClockFreq>
 8001408:	e7e1      	b.n	80013ce <UART_SetConfig+0x1c2>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	6869      	ldr	r1, [r5, #4]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	0848      	lsrs	r0, r1, #1
 8001412:	e7de      	b.n	80013d2 <UART_SetConfig+0x1c6>
        ret = HAL_ERROR;
 8001414:	2401      	movs	r4, #1
 8001416:	e75f      	b.n	80012d8 <UART_SetConfig+0xcc>
 8001418:	40004800 	.word	0x40004800
 800141c:	efff69f3 	.word	0xefff69f3
 8001420:	ffffcfff 	.word	0xffffcfff
 8001424:	fffff4ff 	.word	0xfffff4ff
 8001428:	40013800 	.word	0x40013800
 800142c:	40021000 	.word	0x40021000
 8001430:	08001b48 	.word	0x08001b48
 8001434:	40004400 	.word	0x40004400
 8001438:	08001b4c 	.word	0x08001b4c
 800143c:	00f42400 	.word	0x00f42400
 8001440:	fffffd00 	.word	0xfffffd00
 8001444:	000ffcff 	.word	0x000ffcff
 8001448:	003d0900 	.word	0x003d0900
 800144c:	007a1200 	.word	0x007a1200
 8001450:	01e84800 	.word	0x01e84800

08001454 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001454:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001456:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001458:	07da      	lsls	r2, r3, #31
 800145a:	d506      	bpl.n	800146a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800145c:	6801      	ldr	r1, [r0, #0]
 800145e:	4c28      	ldr	r4, [pc, #160]	; (8001500 <UART_AdvFeatureConfig+0xac>)
 8001460:	684a      	ldr	r2, [r1, #4]
 8001462:	4022      	ands	r2, r4
 8001464:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001466:	4322      	orrs	r2, r4
 8001468:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800146a:	079a      	lsls	r2, r3, #30
 800146c:	d506      	bpl.n	800147c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800146e:	6801      	ldr	r1, [r0, #0]
 8001470:	4c24      	ldr	r4, [pc, #144]	; (8001504 <UART_AdvFeatureConfig+0xb0>)
 8001472:	684a      	ldr	r2, [r1, #4]
 8001474:	4022      	ands	r2, r4
 8001476:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001478:	4322      	orrs	r2, r4
 800147a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800147c:	075a      	lsls	r2, r3, #29
 800147e:	d506      	bpl.n	800148e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001480:	6801      	ldr	r1, [r0, #0]
 8001482:	4c21      	ldr	r4, [pc, #132]	; (8001508 <UART_AdvFeatureConfig+0xb4>)
 8001484:	684a      	ldr	r2, [r1, #4]
 8001486:	4022      	ands	r2, r4
 8001488:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800148a:	4322      	orrs	r2, r4
 800148c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800148e:	071a      	lsls	r2, r3, #28
 8001490:	d506      	bpl.n	80014a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001492:	6801      	ldr	r1, [r0, #0]
 8001494:	4c1d      	ldr	r4, [pc, #116]	; (800150c <UART_AdvFeatureConfig+0xb8>)
 8001496:	684a      	ldr	r2, [r1, #4]
 8001498:	4022      	ands	r2, r4
 800149a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800149c:	4322      	orrs	r2, r4
 800149e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80014a0:	06da      	lsls	r2, r3, #27
 80014a2:	d506      	bpl.n	80014b2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80014a4:	6801      	ldr	r1, [r0, #0]
 80014a6:	4c1a      	ldr	r4, [pc, #104]	; (8001510 <UART_AdvFeatureConfig+0xbc>)
 80014a8:	688a      	ldr	r2, [r1, #8]
 80014aa:	4022      	ands	r2, r4
 80014ac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80014ae:	4322      	orrs	r2, r4
 80014b0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80014b2:	069a      	lsls	r2, r3, #26
 80014b4:	d506      	bpl.n	80014c4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014b6:	6801      	ldr	r1, [r0, #0]
 80014b8:	4c16      	ldr	r4, [pc, #88]	; (8001514 <UART_AdvFeatureConfig+0xc0>)
 80014ba:	688a      	ldr	r2, [r1, #8]
 80014bc:	4022      	ands	r2, r4
 80014be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80014c0:	4322      	orrs	r2, r4
 80014c2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014c4:	065a      	lsls	r2, r3, #25
 80014c6:	d510      	bpl.n	80014ea <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014c8:	6801      	ldr	r1, [r0, #0]
 80014ca:	4d13      	ldr	r5, [pc, #76]	; (8001518 <UART_AdvFeatureConfig+0xc4>)
 80014cc:	684a      	ldr	r2, [r1, #4]
 80014ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80014d0:	402a      	ands	r2, r5
 80014d2:	4322      	orrs	r2, r4
 80014d4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014d6:	2280      	movs	r2, #128	; 0x80
 80014d8:	0352      	lsls	r2, r2, #13
 80014da:	4294      	cmp	r4, r2
 80014dc:	d105      	bne.n	80014ea <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014de:	684a      	ldr	r2, [r1, #4]
 80014e0:	4c0e      	ldr	r4, [pc, #56]	; (800151c <UART_AdvFeatureConfig+0xc8>)
 80014e2:	4022      	ands	r2, r4
 80014e4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80014e6:	4322      	orrs	r2, r4
 80014e8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	d506      	bpl.n	80014fc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80014ee:	6802      	ldr	r2, [r0, #0]
 80014f0:	490b      	ldr	r1, [pc, #44]	; (8001520 <UART_AdvFeatureConfig+0xcc>)
 80014f2:	6853      	ldr	r3, [r2, #4]
 80014f4:	400b      	ands	r3, r1
 80014f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6053      	str	r3, [r2, #4]
  }
}
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	fffdffff 	.word	0xfffdffff
 8001504:	fffeffff 	.word	0xfffeffff
 8001508:	fffbffff 	.word	0xfffbffff
 800150c:	ffff7fff 	.word	0xffff7fff
 8001510:	ffffefff 	.word	0xffffefff
 8001514:	ffffdfff 	.word	0xffffdfff
 8001518:	ffefffff 	.word	0xffefffff
 800151c:	ff9fffff 	.word	0xff9fffff
 8001520:	fff7ffff 	.word	0xfff7ffff

08001524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	0004      	movs	r4, r0
 8001528:	000e      	movs	r6, r1
 800152a:	0015      	movs	r5, r2
 800152c:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	69d3      	ldr	r3, [r2, #28]
 8001532:	4033      	ands	r3, r6
 8001534:	1b9b      	subs	r3, r3, r6
 8001536:	4259      	negs	r1, r3
 8001538:	414b      	adcs	r3, r1
 800153a:	42ab      	cmp	r3, r5
 800153c:	d001      	beq.n	8001542 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800153e:	2000      	movs	r0, #0
 8001540:	e018      	b.n	8001574 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001542:	9b06      	ldr	r3, [sp, #24]
 8001544:	3301      	adds	r3, #1
 8001546:	d0f3      	beq.n	8001530 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001548:	9b06      	ldr	r3, [sp, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d113      	bne.n	8001576 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <UART_WaitOnFlagUntilTimeout+0x60>)
 8001552:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001554:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001556:	400a      	ands	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	31a3      	adds	r1, #163	; 0xa3
 800155e:	31ff      	adds	r1, #255	; 0xff
 8001560:	438a      	bics	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001564:	0022      	movs	r2, r4
 8001566:	2320      	movs	r3, #32
 8001568:	3269      	adds	r2, #105	; 0x69
 800156a:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800156c:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800156e:	2300      	movs	r3, #0
 8001570:	3468      	adds	r4, #104	; 0x68
 8001572:	7023      	strb	r3, [r4, #0]
}
 8001574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001576:	f7fe ffa5 	bl	80004c4 <HAL_GetTick>
 800157a:	9b06      	ldr	r3, [sp, #24]
 800157c:	1bc0      	subs	r0, r0, r7
 800157e:	4283      	cmp	r3, r0
 8001580:	d2d5      	bcs.n	800152e <UART_WaitOnFlagUntilTimeout+0xa>
 8001582:	e7e4      	b.n	800154e <UART_WaitOnFlagUntilTimeout+0x2a>
 8001584:	fffffe5f 	.word	0xfffffe5f

08001588 <HAL_UART_Transmit>:
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800158a:	0007      	movs	r7, r0
{
 800158c:	b085      	sub	sp, #20
 800158e:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8001590:	3769      	adds	r7, #105	; 0x69
 8001592:	783b      	ldrb	r3, [r7, #0]
{
 8001594:	0004      	movs	r4, r0
 8001596:	000d      	movs	r5, r1
 8001598:	0016      	movs	r6, r2
    return HAL_BUSY;
 800159a:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 800159c:	2b20      	cmp	r3, #32
 800159e:	d146      	bne.n	800162e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80015a0:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d043      	beq.n	800162e <HAL_UART_Transmit+0xa6>
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d041      	beq.n	800162e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	68a2      	ldr	r2, [r4, #8]
 80015ae:	015b      	lsls	r3, r3, #5
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d104      	bne.n	80015be <HAL_UART_Transmit+0x36>
 80015b4:	6923      	ldr	r3, [r4, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1) != 0)
 80015ba:	4201      	tst	r1, r0
 80015bc:	d137      	bne.n	800162e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80015be:	0023      	movs	r3, r4
 80015c0:	3368      	adds	r3, #104	; 0x68
 80015c2:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80015c4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80015c6:	2a01      	cmp	r2, #1
 80015c8:	d031      	beq.n	800162e <HAL_UART_Transmit+0xa6>
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015d2:	3321      	adds	r3, #33	; 0x21
 80015d4:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80015d6:	f7fe ff75 	bl	80004c4 <HAL_GetTick>
    huart->TxXferSize = Size;
 80015da:	0023      	movs	r3, r4
 80015dc:	3350      	adds	r3, #80	; 0x50
 80015de:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80015e0:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e2:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 80015e4:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e6:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0U)
 80015e8:	0021      	movs	r1, r4
 80015ea:	3152      	adds	r1, #82	; 0x52
 80015ec:	880a      	ldrh	r2, [r1, #0]
 80015ee:	b292      	uxth	r2, r2
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d10d      	bne.n	8001610 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015f4:	9b03      	ldr	r3, [sp, #12]
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	0020      	movs	r0, r4
 80015fc:	9b02      	ldr	r3, [sp, #8]
 80015fe:	f7ff ff91 	bl	8001524 <UART_WaitOnFlagUntilTimeout>
 8001602:	2800      	cmp	r0, #0
 8001604:	d112      	bne.n	800162c <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 8001606:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001608:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800160a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 800160c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800160e:	e00e      	b.n	800162e <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001610:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001614:	3b01      	subs	r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	0020      	movs	r0, r4
 8001622:	9b02      	ldr	r3, [sp, #8]
 8001624:	f7ff ff7e 	bl	8001524 <UART_WaitOnFlagUntilTimeout>
 8001628:	2800      	cmp	r0, #0
 800162a:	d002      	beq.n	8001632 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 800162c:	2003      	movs	r0, #3
}
 800162e:	b005      	add	sp, #20
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001632:	68a3      	ldr	r3, [r4, #8]
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	42b3      	cmp	r3, r6
 8001638:	d108      	bne.n	800164c <HAL_UART_Transmit+0xc4>
 800163a:	6923      	ldr	r3, [r4, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001640:	882b      	ldrh	r3, [r5, #0]
        pData += 2U;
 8001642:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001644:	05db      	lsls	r3, r3, #23
 8001646:	0ddb      	lsrs	r3, r3, #23
 8001648:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2U;
 800164a:	e7cd      	b.n	80015e8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800164c:	782b      	ldrb	r3, [r5, #0]
 800164e:	3501      	adds	r5, #1
 8001650:	6293      	str	r3, [r2, #40]	; 0x28
 8001652:	e7c9      	b.n	80015e8 <HAL_UART_Transmit+0x60>

08001654 <HAL_UART_Receive>:
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001658:	0003      	movs	r3, r0
 800165a:	336a      	adds	r3, #106	; 0x6a
{
 800165c:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800165e:	781a      	ldrb	r2, [r3, #0]
{
 8001660:	0004      	movs	r4, r0
 8001662:	b085      	sub	sp, #20
 8001664:	000d      	movs	r5, r1
    return HAL_BUSY;
 8001666:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001668:	2a20      	cmp	r2, #32
 800166a:	d139      	bne.n	80016e0 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800166c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800166e:	2900      	cmp	r1, #0
 8001670:	d036      	beq.n	80016e0 <HAL_UART_Receive+0x8c>
 8001672:	2e00      	cmp	r6, #0
 8001674:	d034      	beq.n	80016e0 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	68a1      	ldr	r1, [r4, #8]
 800167a:	0152      	lsls	r2, r2, #5
 800167c:	4291      	cmp	r1, r2
 800167e:	d104      	bne.n	800168a <HAL_UART_Receive+0x36>
 8001680:	6922      	ldr	r2, [r4, #16]
 8001682:	2a00      	cmp	r2, #0
 8001684:	d101      	bne.n	800168a <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1) != 0)
 8001686:	4205      	tst	r5, r0
 8001688:	d12a      	bne.n	80016e0 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 800168a:	0022      	movs	r2, r4
 800168c:	3268      	adds	r2, #104	; 0x68
 800168e:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8001690:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001692:	2901      	cmp	r1, #1
 8001694:	d024      	beq.n	80016e0 <HAL_UART_Receive+0x8c>
 8001696:	2101      	movs	r1, #1
 8001698:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169a:	2200      	movs	r2, #0
 800169c:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800169e:	3222      	adds	r2, #34	; 0x22
 80016a0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80016a2:	f7fe ff0f 	bl	80004c4 <HAL_GetTick>
    huart->RxXferSize = Size;
 80016a6:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 80016ac:	3358      	adds	r3, #88	; 0x58
 80016ae:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80016b0:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 80016b2:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 80016b4:	0149      	lsls	r1, r1, #5
 80016b6:	3304      	adds	r3, #4
 80016b8:	428a      	cmp	r2, r1
 80016ba:	d115      	bne.n	80016e8 <HAL_UART_Receive+0x94>
 80016bc:	6922      	ldr	r2, [r4, #16]
 80016be:	2a00      	cmp	r2, #0
 80016c0:	d110      	bne.n	80016e4 <HAL_UART_Receive+0x90>
 80016c2:	4a23      	ldr	r2, [pc, #140]	; (8001750 <HAL_UART_Receive+0xfc>)
 80016c4:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 80016c6:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 80016c8:	0022      	movs	r2, r4
 80016ca:	325a      	adds	r2, #90	; 0x5a
 80016cc:	8810      	ldrh	r0, [r2, #0]
 80016ce:	b280      	uxth	r0, r0
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d119      	bne.n	8001708 <HAL_UART_Receive+0xb4>
    huart->RxState = HAL_UART_STATE_READY;
 80016d4:	0023      	movs	r3, r4
 80016d6:	2220      	movs	r2, #32
 80016d8:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 80016da:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 80016dc:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80016de:	7020      	strb	r0, [r4, #0]
}
 80016e0:	b005      	add	sp, #20
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80016e4:	22ff      	movs	r2, #255	; 0xff
 80016e6:	e7ed      	b.n	80016c4 <HAL_UART_Receive+0x70>
 80016e8:	2a00      	cmp	r2, #0
 80016ea:	d104      	bne.n	80016f6 <HAL_UART_Receive+0xa2>
 80016ec:	6922      	ldr	r2, [r4, #16]
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	d0f8      	beq.n	80016e4 <HAL_UART_Receive+0x90>
 80016f2:	227f      	movs	r2, #127	; 0x7f
 80016f4:	e7e6      	b.n	80016c4 <HAL_UART_Receive+0x70>
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	0549      	lsls	r1, r1, #21
 80016fa:	428a      	cmp	r2, r1
 80016fc:	d1e3      	bne.n	80016c6 <HAL_UART_Receive+0x72>
 80016fe:	6922      	ldr	r2, [r4, #16]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d0f6      	beq.n	80016f2 <HAL_UART_Receive+0x9e>
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	e7dd      	b.n	80016c4 <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8001708:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800170a:	2120      	movs	r1, #32
      huart->RxXferCount--;
 800170c:	3b01      	subs	r3, #1
 800170e:	b29b      	uxth	r3, r3
 8001710:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001712:	0020      	movs	r0, r4
 8001714:	9700      	str	r7, [sp, #0]
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f7ff ff03 	bl	8001524 <UART_WaitOnFlagUntilTimeout>
 800171e:	2800      	cmp	r0, #0
 8001720:	d113      	bne.n	800174a <HAL_UART_Receive+0xf6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001722:	68a2      	ldr	r2, [r4, #8]
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	0011      	movs	r1, r2
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	0152      	lsls	r2, r2, #5
 800172c:	4291      	cmp	r1, r2
 800172e:	d107      	bne.n	8001740 <HAL_UART_Receive+0xec>
 8001730:	6922      	ldr	r2, [r4, #16]
 8001732:	2a00      	cmp	r2, #0
 8001734:	d104      	bne.n	8001740 <HAL_UART_Receive+0xec>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	4033      	ands	r3, r6
 800173a:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 800173c:	3502      	adds	r5, #2
 800173e:	e7c3      	b.n	80016c8 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	4033      	ands	r3, r6
 8001744:	702b      	strb	r3, [r5, #0]
 8001746:	3501      	adds	r5, #1
 8001748:	e7be      	b.n	80016c8 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800174a:	2003      	movs	r0, #3
 800174c:	e7c8      	b.n	80016e0 <HAL_UART_Receive+0x8c>
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	000001ff 	.word	0x000001ff

08001754 <UART_CheckIdleState>:
{
 8001754:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001756:	2600      	movs	r6, #0
{
 8001758:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800175a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800175c:	f7fe feb2 	bl	80004c4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001760:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001762:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	071b      	lsls	r3, r3, #28
 8001768:	d417      	bmi.n	800179a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	075b      	lsls	r3, r3, #29
 8001770:	d50a      	bpl.n	8001788 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <UART_CheckIdleState+0x60>)
 8001776:	2200      	movs	r2, #0
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	03c9      	lsls	r1, r1, #15
 800177c:	002b      	movs	r3, r5
 800177e:	0020      	movs	r0, r4
 8001780:	f7ff fed0 	bl	8001524 <UART_WaitOnFlagUntilTimeout>
 8001784:	2800      	cmp	r0, #0
 8001786:	d113      	bne.n	80017b0 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8001788:	0022      	movs	r2, r4
 800178a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800178c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800178e:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001790:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001792:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001794:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001796:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001798:	e00b      	b.n	80017b2 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <UART_CheckIdleState+0x60>)
 800179e:	0032      	movs	r2, r6
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	0389      	lsls	r1, r1, #14
 80017a4:	0003      	movs	r3, r0
 80017a6:	0020      	movs	r0, r4
 80017a8:	f7ff febc 	bl	8001524 <UART_WaitOnFlagUntilTimeout>
 80017ac:	2800      	cmp	r0, #0
 80017ae:	d0dc      	beq.n	800176a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80017b0:	2003      	movs	r0, #3
}
 80017b2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80017b4:	01ffffff 	.word	0x01ffffff

080017b8 <HAL_UART_Init>:
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80017bc:	d101      	bne.n	80017c2 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80017be:	2001      	movs	r0, #1
}
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80017c2:	0005      	movs	r5, r0
 80017c4:	3569      	adds	r5, #105	; 0x69
 80017c6:	782b      	ldrb	r3, [r5, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d104      	bne.n	80017d8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80017ce:	0002      	movs	r2, r0
 80017d0:	3268      	adds	r2, #104	; 0x68
 80017d2:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80017d4:	f000 f8f0 	bl	80019b8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80017d8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80017da:	2101      	movs	r1, #1
 80017dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017de:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	438b      	bics	r3, r1
 80017e4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 80017ec:	0020      	movs	r0, r4
 80017ee:	f7ff fe31 	bl	8001454 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017f2:	0020      	movs	r0, r4
 80017f4:	f7ff fd0a 	bl	800120c <UART_SetConfig>
 80017f8:	2801      	cmp	r0, #1
 80017fa:	d0e0      	beq.n	80017be <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <HAL_UART_Init+0x68>)
 8001800:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001802:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001804:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001806:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	438a      	bics	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001810:	2201      	movs	r2, #1
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001818:	f7ff ff9c 	bl	8001754 <UART_CheckIdleState>
 800181c:	e7d0      	b.n	80017c0 <HAL_UART_Init+0x8>
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	ffffb7ff 	.word	0xffffb7ff

08001824 <uart_print>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void uart_print(uint8_t *string){
 8001824:	b510      	push	{r4, lr}
 8001826:	0004      	movs	r4, r0
	HAL_UART_Transmit(&huart1, string, (uint16_t)strlen(string), 100);
 8001828:	f7fe fc6e 	bl	8000108 <strlen>
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	b282      	uxth	r2, r0
 8001830:	0021      	movs	r1, r4
 8001832:	4802      	ldr	r0, [pc, #8]	; (800183c <uart_print+0x18>)
 8001834:	f7ff fea8 	bl	8001588 <HAL_UART_Transmit>
}
 8001838:	bd10      	pop	{r4, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	20000024 	.word	0x20000024

08001840 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	4920      	ldr	r1, [pc, #128]	; (80018c4 <SystemClock_Config+0x84>)
 8001842:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <SystemClock_Config+0x88>)
 8001844:	680b      	ldr	r3, [r1, #0]
{
 8001846:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	401a      	ands	r2, r3
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001852:	2310      	movs	r3, #16
{
 8001854:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001856:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001858:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800185a:	2401      	movs	r4, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800185c:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800185e:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001862:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001864:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001866:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001868:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f7fe ff7f 	bl	800076c <HAL_RCC_OscConfig>
 800186e:	1e01      	subs	r1, r0, #0
 8001870:	d000      	beq.n	8001874 <SystemClock_Config+0x34>
 8001872:	e7fe      	b.n	8001872 <SystemClock_Config+0x32>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001876:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800187a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187c:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800187e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001882:	f7ff fa1f 	bl	8000cc4 <HAL_RCC_ClockConfig>
 8001886:	2800      	cmp	r0, #0
 8001888:	d000      	beq.n	800188c <SystemClock_Config+0x4c>
 800188a:	e7fe      	b.n	800188a <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800188c:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001890:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001892:	f7ff faf5 	bl	8000e80 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	1e04      	subs	r4, r0, #0
 8001898:	d000      	beq.n	800189c <SystemClock_Config+0x5c>
 800189a:	e7fe      	b.n	800189a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800189c:	f7ff faca 	bl	8000e34 <HAL_RCC_GetHCLKFreq>
 80018a0:	21fa      	movs	r1, #250	; 0xfa
 80018a2:	0089      	lsls	r1, r1, #2
 80018a4:	f7fe fc4c 	bl	8000140 <__udivsi3>
 80018a8:	f7fe fe42 	bl	8000530 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018ac:	2004      	movs	r0, #4
 80018ae:	f7fe fe59 	bl	8000564 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018b2:	2001      	movs	r0, #1
 80018b4:	0022      	movs	r2, r4
 80018b6:	0021      	movs	r1, r4
 80018b8:	4240      	negs	r0, r0
 80018ba:	f7fe fe09 	bl	80004d0 <HAL_NVIC_SetPriority>
}
 80018be:	b01c      	add	sp, #112	; 0x70
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40007000 	.word	0x40007000
 80018c8:	ffffe7ff 	.word	0xffffe7ff

080018cc <main>:
{
 80018cc:	b530      	push	{r4, r5, lr}
 80018ce:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80018d0:	f7fe fde0 	bl	8000494 <HAL_Init>
  SystemClock_Config();
 80018d4:	f7ff ffb4 	bl	8001840 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	2002      	movs	r0, #2
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <main+0x94>)
  huart1.Instance = USART1;
 80018dc:	4c21      	ldr	r4, [pc, #132]	; (8001964 <main+0x98>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018e0:	4301      	orrs	r1, r0
 80018e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80018e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e6:	220c      	movs	r2, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4003      	ands	r3, r0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	9b00      	ldr	r3, [sp, #0]
  huart1.Instance = USART1;
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <main+0x9c>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f0:	0020      	movs	r0, r4
  huart1.Instance = USART1;
 80018f2:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 80018f4:	2396      	movs	r3, #150	; 0x96
 80018f6:	019b      	lsls	r3, r3, #6
 80018f8:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	6162      	str	r2, [r4, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001900:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001904:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001906:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001908:	6223      	str	r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190a:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190c:	f7ff ff54 	bl	80017b8 <HAL_UART_Init>
 8001910:	2800      	cmp	r0, #0
 8001912:	d000      	beq.n	8001916 <main+0x4a>
 8001914:	e7fe      	b.n	8001914 <main+0x48>
  uart_print((uint8_t *)"Welcome!\r\n");
 8001916:	4815      	ldr	r0, [pc, #84]	; (800196c <main+0xa0>)
	  HAL_UART_Receive(&huart1, in_buffer, sizeof(in_buffer), 1000);
 8001918:	25fa      	movs	r5, #250	; 0xfa
  uart_print((uint8_t *)"Welcome!\r\n");
 800191a:	f7ff ff83 	bl	8001824 <uart_print>
	  HAL_UART_Receive(&huart1, in_buffer, sizeof(in_buffer), 1000);
 800191e:	00ad      	lsls	r5, r5, #2
	  uint8_t in_buffer[32] = "";
 8001920:	2100      	movs	r1, #0
 8001922:	221c      	movs	r2, #28
 8001924:	a807      	add	r0, sp, #28
 8001926:	9106      	str	r1, [sp, #24]
 8001928:	f000 f8f5 	bl	8001b16 <memset>
	  HAL_UART_Receive(&huart1, in_buffer, sizeof(in_buffer), 1000);
 800192c:	002b      	movs	r3, r5
 800192e:	2220      	movs	r2, #32
 8001930:	a906      	add	r1, sp, #24
 8001932:	0020      	movs	r0, r4
 8001934:	f7ff fe8e 	bl	8001654 <HAL_UART_Receive>
	  char hello_string[] = "hello!\r";
 8001938:	490d      	ldr	r1, [pc, #52]	; (8001970 <main+0xa4>)
 800193a:	2208      	movs	r2, #8
 800193c:	a801      	add	r0, sp, #4
 800193e:	f000 f8e1 	bl	8001b04 <memcpy>
	  if(strcoll((char *)in_buffer, hello_string) == 0){
 8001942:	a901      	add	r1, sp, #4
 8001944:	a806      	add	r0, sp, #24
 8001946:	f000 f8ee 	bl	8001b26 <strcoll>
 800194a:	2800      	cmp	r0, #0
 800194c:	d1e8      	bne.n	8001920 <main+0x54>
		  uint8_t output_buffer[] = "Good bye!\r\n";
 800194e:	220c      	movs	r2, #12
 8001950:	4908      	ldr	r1, [pc, #32]	; (8001974 <main+0xa8>)
 8001952:	a803      	add	r0, sp, #12
 8001954:	f000 f8d6 	bl	8001b04 <memcpy>
		  uart_print(output_buffer);
 8001958:	a803      	add	r0, sp, #12
 800195a:	f7ff ff63 	bl	8001824 <uart_print>
  {
 800195e:	e7df      	b.n	8001920 <main+0x54>
 8001960:	40021000 	.word	0x40021000
 8001964:	20000024 	.word	0x20000024
 8001968:	40013800 	.word	0x40013800
 800196c:	08001b59 	.word	0x08001b59
 8001970:	08001b64 	.word	0x08001b64
 8001974:	08001b6c 	.word	0x08001b6c

08001978 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001978:	2201      	movs	r2, #1
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_MspInit+0x3c>)
{
 800197c:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001980:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800198a:	0552      	lsls	r2, r2, #21
 800198c:	430a      	orrs	r2, r1
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	4240      	negs	r0, r0
 8001994:	0011      	movs	r1, r2
 8001996:	f7fe fd9b 	bl	80004d0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2002      	movs	r0, #2
 800199e:	0011      	movs	r1, r2
 80019a0:	4240      	negs	r0, r0
 80019a2:	f7fe fd95 	bl	80004d0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2001      	movs	r0, #1
 80019aa:	0011      	movs	r1, r2
 80019ac:	4240      	negs	r0, r0
 80019ae:	f7fe fd8f 	bl	80004d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bd10      	pop	{r4, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_UART_MspInit+0x34>)
 80019bc:	6802      	ldr	r2, [r0, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d112      	bne.n	80019e8 <HAL_UART_MspInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_UART_MspInit+0x38>)
 80019c6:	01db      	lsls	r3, r3, #7
 80019c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	480a      	ldr	r0, [pc, #40]	; (80019f4 <HAL_UART_MspInit+0x3c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6353      	str	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	3bbe      	subs	r3, #190	; 0xbe
 80019d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80019e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f7fe fdd2 	bl	800058c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e8:	b007      	add	sp, #28
 80019ea:	bd00      	pop	{pc}
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40021000 	.word	0x40021000
 80019f4:	50000400 	.word	0x50000400

080019f8 <NMI_Handler>:
 80019f8:	4770      	bx	lr

080019fa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80019fa:	e7fe      	b.n	80019fa <HardFault_Handler>

080019fc <SVC_Handler>:
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f7fe fd57 	bl	80004b4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001a06:	f7fe fdbc 	bl	8000582 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0a:	bd10      	pop	{r4, pc}

08001a0c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <SystemInit+0x44>)
 8001a10:	0052      	lsls	r2, r2, #1
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <SystemInit+0x48>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <SystemInit+0x4c>)
 8001a24:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a26:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001a28:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <SystemInit+0x50>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4909      	ldr	r1, [pc, #36]	; (8001a60 <SystemInit+0x54>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <SystemInit+0x58>)
 8001a48:	0512      	lsls	r2, r2, #20
 8001a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a4c:	4770      	bx	lr
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	40021000 	.word	0x40021000
 8001a54:	88ff400c 	.word	0x88ff400c
 8001a58:	fef6fff6 	.word	0xfef6fff6
 8001a5c:	fffbffff 	.word	0xfffbffff
 8001a60:	ff02ffff 	.word	0xff02ffff
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a6e:	e003      	b.n	8001a78 <LoopCopyDataInit>

08001a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a76:	3104      	adds	r1, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <LoopForever+0xe>)
  adds  r2, r0, r1
 8001a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a80:	d3f6      	bcc.n	8001a70 <CopyDataInit>
  ldr  r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001a84:	e002      	b.n	8001a8c <LoopFillZerobss>

08001a86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001a86:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8a:	3204      	adds	r2, #4

08001a8c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <LoopForever+0x16>)
  cmp  r2, r3
 8001a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a90:	d3f9      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a92:	f7ff ffbb 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f000 f811 	bl	8001abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff ff17 	bl	80018cc <main>

08001a9e <LoopForever>:

LoopForever:
    b LoopForever
 8001a9e:	e7fe      	b.n	8001a9e <LoopForever>
  ldr   r0, =_estack
 8001aa0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001aa4:	08001bac 	.word	0x08001bac
  ldr  r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001aac:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001ab0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001ab4:	20000094 	.word	0x20000094

08001ab8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_COMP_IRQHandler>
	...

08001abc <__libc_init_array>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	2600      	movs	r6, #0
 8001ac0:	4d0c      	ldr	r5, [pc, #48]	; (8001af4 <__libc_init_array+0x38>)
 8001ac2:	4c0d      	ldr	r4, [pc, #52]	; (8001af8 <__libc_init_array+0x3c>)
 8001ac4:	1b64      	subs	r4, r4, r5
 8001ac6:	10a4      	asrs	r4, r4, #2
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d109      	bne.n	8001ae0 <__libc_init_array+0x24>
 8001acc:	2600      	movs	r6, #0
 8001ace:	f000 f82f 	bl	8001b30 <_init>
 8001ad2:	4d0a      	ldr	r5, [pc, #40]	; (8001afc <__libc_init_array+0x40>)
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <__libc_init_array+0x44>)
 8001ad6:	1b64      	subs	r4, r4, r5
 8001ad8:	10a4      	asrs	r4, r4, #2
 8001ada:	42a6      	cmp	r6, r4
 8001adc:	d105      	bne.n	8001aea <__libc_init_array+0x2e>
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
 8001ae0:	00b3      	lsls	r3, r6, #2
 8001ae2:	58eb      	ldr	r3, [r5, r3]
 8001ae4:	4798      	blx	r3
 8001ae6:	3601      	adds	r6, #1
 8001ae8:	e7ee      	b.n	8001ac8 <__libc_init_array+0xc>
 8001aea:	00b3      	lsls	r3, r6, #2
 8001aec:	58eb      	ldr	r3, [r5, r3]
 8001aee:	4798      	blx	r3
 8001af0:	3601      	adds	r6, #1
 8001af2:	e7f2      	b.n	8001ada <__libc_init_array+0x1e>
 8001af4:	08001ba4 	.word	0x08001ba4
 8001af8:	08001ba4 	.word	0x08001ba4
 8001afc:	08001ba4 	.word	0x08001ba4
 8001b00:	08001ba8 	.word	0x08001ba8

08001b04 <memcpy>:
 8001b04:	2300      	movs	r3, #0
 8001b06:	b510      	push	{r4, lr}
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d100      	bne.n	8001b0e <memcpy+0xa>
 8001b0c:	bd10      	pop	{r4, pc}
 8001b0e:	5ccc      	ldrb	r4, [r1, r3]
 8001b10:	54c4      	strb	r4, [r0, r3]
 8001b12:	3301      	adds	r3, #1
 8001b14:	e7f8      	b.n	8001b08 <memcpy+0x4>

08001b16 <memset>:
 8001b16:	0003      	movs	r3, r0
 8001b18:	1882      	adds	r2, r0, r2
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d100      	bne.n	8001b20 <memset+0xa>
 8001b1e:	4770      	bx	lr
 8001b20:	7019      	strb	r1, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	e7f9      	b.n	8001b1a <memset+0x4>

08001b26 <strcoll>:
 8001b26:	b510      	push	{r4, lr}
 8001b28:	f7fe faf5 	bl	8000116 <strcmp>
 8001b2c:	bd10      	pop	{r4, pc}
	...

08001b30 <_init>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr

08001b3c <_fini>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr
