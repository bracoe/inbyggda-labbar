
LabB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000f14  08000f14  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f34  08000f34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000f3c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000f3c  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00001e74  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000769b  00000000  00000000  00021ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001392  00000000  00000000  0002953b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000308  00000000  00000000  0002a8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f0  00000000  00000000  0002abd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001463  00000000  00000000  0002afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002c42b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000644  00000000  00000000  0002c4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00000e98  00000000  00000000  0002caec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000efc 	.word	0x08000efc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000efc 	.word	0x08000efc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000226:	e003      	b.n	8000230 <LoopCopyDataInit>

08000228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800022a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800022c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800022e:	3104      	adds	r1, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000230:	480b      	ldr	r0, [pc, #44]	; (8000260 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000238:	d3f6      	bcc.n	8000228 <CopyDataInit>
  ldr  r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  b  LoopFillZerobss
 800023c:	e002      	b.n	8000244 <LoopFillZerobss>

0800023e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800023e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000240:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000242:	3204      	adds	r2, #4

08000244 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <LoopForever+0x16>)
  cmp  r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000248:	d3f9      	bcc.n	800023e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024a:	f000 f903 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800024e:	f000 fe31 	bl	8000eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000252:	f000 f84d 	bl	80002f0 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800025c:	08000f38 	.word	0x08000f38
  ldr  r0, =_sdata
 8000260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000264:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000268:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 800026c:	20000024 	.word	0x20000024

08000270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_COMP_IRQHandler>
	...

08000274 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000274:	491c      	ldr	r1, [pc, #112]	; (80002e8 <SystemClock_Config+0x74>)
 8000276:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <SystemClock_Config+0x78>)
 8000278:	680b      	ldr	r3, [r1, #0]
{
 800027a:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	401a      	ands	r2, r3
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	011b      	lsls	r3, r3, #4
 8000282:	4313      	orrs	r3, r2
 8000284:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000286:	2310      	movs	r3, #16
{
 8000288:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800028c:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028e:	3b0f      	subs	r3, #15
 8000290:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000292:	2300      	movs	r3, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000294:	0212      	lsls	r2, r2, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000298:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800029a:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f000 fa9f 	bl	80007e0 <HAL_RCC_OscConfig>
 80002a2:	1e01      	subs	r1, r0, #0
 80002a4:	d000      	beq.n	80002a8 <SystemClock_Config+0x34>
 80002a6:	e7fe      	b.n	80002a6 <SystemClock_Config+0x32>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002aa:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ae:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b6:	f000 fd3f 	bl	8000d38 <HAL_RCC_ClockConfig>
 80002ba:	1e04      	subs	r4, r0, #0
 80002bc:	d000      	beq.n	80002c0 <SystemClock_Config+0x4c>
 80002be:	e7fe      	b.n	80002be <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002c0:	f000 fdf2 	bl	8000ea8 <HAL_RCC_GetHCLKFreq>
 80002c4:	21fa      	movs	r1, #250	; 0xfa
 80002c6:	0089      	lsls	r1, r1, #2
 80002c8:	f7ff ff1e 	bl	8000108 <__udivsi3>
 80002cc:	f000 f95e 	bl	800058c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002d0:	2004      	movs	r0, #4
 80002d2:	f000 f975 	bl	80005c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002d6:	2001      	movs	r0, #1
 80002d8:	0022      	movs	r2, r4
 80002da:	0021      	movs	r1, r4
 80002dc:	4240      	negs	r0, r0
 80002de:	f000 f925 	bl	800052c <HAL_NVIC_SetPriority>
}
 80002e2:	b014      	add	sp, #80	; 0x50
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40007000 	.word	0x40007000
 80002ec:	ffffe7ff 	.word	0xffffe7ff

080002f0 <main>:
{
 80002f0:	b570      	push	{r4, r5, r6, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	2602      	movs	r6, #2
{
 80002f6:	b088      	sub	sp, #32
  HAL_Init();
 80002f8:	f000 f8ee 	bl	80004d8 <HAL_Init>
  SystemClock_Config();
 80002fc:	f7ff ffba 	bl	8000274 <SystemClock_Config>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000300:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <main+0x108>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000304:	2138      	movs	r1, #56	; 0x38
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000308:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030a:	432a      	orrs	r2, r5
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
 800030e:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	402a      	ands	r2, r5
 8000314:	9201      	str	r2, [sp, #4]
 8000316:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800031a:	4332      	orrs	r2, r6
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4033      	ands	r3, r6
 8000324:	9302      	str	r3, [sp, #8]
 8000326:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000328:	f000 fa1a 	bl	8000760 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800032e:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	a903      	add	r1, sp, #12
 8000332:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000334:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f000 f954 	bl	80005e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000340:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	a903      	add	r1, sp, #12
 8000344:	482d      	ldr	r0, [pc, #180]	; (80003fc <main+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000346:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000348:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	f000 f94c 	bl	80005e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000350:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000352:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000354:	a903      	add	r1, sp, #12
 8000356:	4829      	ldr	r0, [pc, #164]	; (80003fc <main+0x10c>)
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8000358:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800035a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035c:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035e:	f000 f943 	bl	80005e8 <HAL_GPIO_Init>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8000362:	05e4      	lsls	r4, r4, #23
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7) == GPIO_PIN_SET)){
 8000364:	2108      	movs	r1, #8
 8000366:	4825      	ldr	r0, [pc, #148]	; (80003fc <main+0x10c>)
 8000368:	f000 f9f4 	bl	8000754 <HAL_GPIO_ReadPin>
 800036c:	2800      	cmp	r0, #0
 800036e:	d12b      	bne.n	80003c8 <main+0xd8>
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	4822      	ldr	r0, [pc, #136]	; (80003fc <main+0x10c>)
 8000374:	f000 f9ee 	bl	8000754 <HAL_GPIO_ReadPin>
 8000378:	0005      	movs	r5, r0
 800037a:	2801      	cmp	r0, #1
 800037c:	d124      	bne.n	80003c8 <main+0xd8>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 800037e:	0002      	movs	r2, r0
 8000380:	2108      	movs	r1, #8
 8000382:	0020      	movs	r0, r4
 8000384:	f000 f9ec 	bl	8000760 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000388:	002a      	movs	r2, r5
 800038a:	2110      	movs	r1, #16
 800038c:	0020      	movs	r0, r4
 800038e:	f000 f9e7 	bl	8000760 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000392:	002a      	movs	r2, r5
 8000394:	2120      	movs	r1, #32
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 8000396:	0020      	movs	r0, r4
 8000398:	f000 f9e2 	bl	8000760 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 800039c:	2064      	movs	r0, #100	; 0x64
 800039e:	f000 f8b9 	bl	8000514 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 80003a2:	0020      	movs	r0, r4
 80003a4:	2200      	movs	r2, #0
 80003a6:	2108      	movs	r1, #8
 80003a8:	f000 f9da 	bl	8000760 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80003ac:	0020      	movs	r0, r4
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	f000 f9d5 	bl	8000760 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80003b6:	0020      	movs	r0, r4
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	f000 f9d0 	bl	8000760 <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 80003c0:	2064      	movs	r0, #100	; 0x64
 80003c2:	f000 f8a7 	bl	8000514 <HAL_Delay>
	  if((HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET) && (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7) == GPIO_PIN_SET)){
 80003c6:	e7cd      	b.n	8000364 <main+0x74>
	  	  else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7) == GPIO_PIN_SET){
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	480c      	ldr	r0, [pc, #48]	; (80003fc <main+0x10c>)
 80003cc:	f000 f9c2 	bl	8000754 <HAL_GPIO_ReadPin>
 80003d0:	0005      	movs	r5, r0
 80003d2:	2801      	cmp	r0, #1
 80003d4:	d107      	bne.n	80003e6 <main+0xf6>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 80003d6:	0002      	movs	r2, r0
 80003d8:	2108      	movs	r1, #8
 80003da:	0020      	movs	r0, r4
 80003dc:	f000 f9c0 	bl	8000760 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80003e0:	002a      	movs	r2, r5
 80003e2:	2110      	movs	r1, #16
 80003e4:	e7d7      	b.n	8000396 <main+0xa6>
	  	  else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET){
 80003e6:	2108      	movs	r1, #8
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <main+0x10c>)
 80003ea:	f000 f9b3 	bl	8000754 <HAL_GPIO_ReadPin>
 80003ee:	2800      	cmp	r0, #0
 80003f0:	d1d7      	bne.n	80003a2 <main+0xb2>
	  		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	e7ce      	b.n	8000396 <main+0xa6>
 80003f8:	40021000 	.word	0x40021000
 80003fc:	50000400 	.word	0x50000400

08000400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000400:	2201      	movs	r2, #1
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <HAL_MspInit+0x3c>)
{
 8000404:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000408:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000412:	0552      	lsls	r2, r2, #21
 8000414:	430a      	orrs	r2, r1
 8000416:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	4240      	negs	r0, r0
 800041c:	0011      	movs	r1, r2
 800041e:	f000 f885 	bl	800052c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2002      	movs	r0, #2
 8000426:	0011      	movs	r1, r2
 8000428:	4240      	negs	r0, r0
 800042a:	f000 f87f 	bl	800052c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2001      	movs	r0, #1
 8000432:	0011      	movs	r1, r2
 8000434:	4240      	negs	r0, r0
 8000436:	f000 f879 	bl	800052c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bd10      	pop	{r4, pc}
 800043c:	40021000 	.word	0x40021000

08000440 <NMI_Handler>:
 8000440:	4770      	bx	lr

08000442 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000442:	e7fe      	b.n	8000442 <HardFault_Handler>

08000444 <SVC_Handler>:
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000446:	4770      	bx	lr

08000448 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000448:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044a:	f000 f855 	bl	80004f8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800044e:	f000 f8c6 	bl	80005de <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000452:	bd10      	pop	{r4, pc}

08000454 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <SystemInit+0x44>)
 8000458:	0052      	lsls	r2, r2, #1
 800045a:	6819      	ldr	r1, [r3, #0]
 800045c:	430a      	orrs	r2, r1
 800045e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000460:	68da      	ldr	r2, [r3, #12]
 8000462:	490e      	ldr	r1, [pc, #56]	; (800049c <SystemInit+0x48>)
 8000464:	400a      	ands	r2, r1
 8000466:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <SystemInit+0x4c>)
 800046c:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800046e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000470:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	438a      	bics	r2, r1
 8000476:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	490a      	ldr	r1, [pc, #40]	; (80004a4 <SystemInit+0x50>)
 800047c:	400a      	ands	r2, r1
 800047e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	4909      	ldr	r1, [pc, #36]	; (80004a8 <SystemInit+0x54>)
 8000484:	400a      	ands	r2, r1
 8000486:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <SystemInit+0x58>)
 8000490:	0512      	lsls	r2, r2, #20
 8000492:	609a      	str	r2, [r3, #8]
#endif
}
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000
 800049c:	88ff400c 	.word	0x88ff400c
 80004a0:	fef6fff6 	.word	0xfef6fff6
 80004a4:	fffbffff 	.word	0xfffbffff
 80004a8:	ff02ffff 	.word	0xff02ffff
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004b0:	21fa      	movs	r1, #250	; 0xfa
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <HAL_InitTick+0x24>)
{
 80004b4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004b6:	0089      	lsls	r1, r1, #2
{
 80004b8:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80004ba:	6818      	ldr	r0, [r3, #0]
 80004bc:	f7ff fe24 	bl	8000108 <__udivsi3>
 80004c0:	f000 f864 	bl	800058c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80004c4:	2001      	movs	r0, #1
 80004c6:	2200      	movs	r2, #0
 80004c8:	0021      	movs	r1, r4
 80004ca:	4240      	negs	r0, r0
 80004cc:	f000 f82e 	bl	800052c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80004d0:	2000      	movs	r0, #0
 80004d2:	bd10      	pop	{r4, pc}
 80004d4:	20000000 	.word	0x20000000

080004d8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004d8:	2340      	movs	r3, #64	; 0x40
 80004da:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <HAL_Init+0x1c>)
{
 80004dc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004de:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e0:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004e2:	430b      	orrs	r3, r1
 80004e4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	f7ff ffe3 	bl	80004b0 <HAL_InitTick>
  HAL_MspInit();
 80004ea:	f7ff ff89 	bl	8000400 <HAL_MspInit>
}
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40022000 	.word	0x40022000

080004f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004f8:	4a02      	ldr	r2, [pc, #8]	; (8000504 <HAL_IncTick+0xc>)
 80004fa:	6813      	ldr	r3, [r2, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	20000020 	.word	0x20000020

08000508 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <HAL_GetTick+0x8>)
 800050a:	6818      	ldr	r0, [r3, #0]
}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	20000020 	.word	0x20000020

08000514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000514:	b513      	push	{r0, r1, r4, lr}
 8000516:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000518:	f7ff fff6 	bl	8000508 <HAL_GetTick>
 800051c:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800051e:	f7ff fff3 	bl	8000508 <HAL_GetTick>
 8000522:	9b01      	ldr	r3, [sp, #4]
 8000524:	1b00      	subs	r0, r0, r4
 8000526:	4298      	cmp	r0, r3
 8000528:	d3f9      	bcc.n	800051e <HAL_Delay+0xa>
  {
  }
}
 800052a:	bd13      	pop	{r0, r1, r4, pc}

0800052c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000530:	2800      	cmp	r0, #0
 8000532:	da14      	bge.n	800055e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000534:	230f      	movs	r3, #15
 8000536:	b2c0      	uxtb	r0, r0
 8000538:	4003      	ands	r3, r0
 800053a:	3b08      	subs	r3, #8
 800053c:	4a11      	ldr	r2, [pc, #68]	; (8000584 <HAL_NVIC_SetPriority+0x58>)
 800053e:	089b      	lsrs	r3, r3, #2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	189b      	adds	r3, r3, r2
 8000544:	2203      	movs	r2, #3
 8000546:	4010      	ands	r0, r2
 8000548:	4090      	lsls	r0, r2
 800054a:	32fc      	adds	r2, #252	; 0xfc
 800054c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800054e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000550:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000552:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000554:	69dc      	ldr	r4, [r3, #28]
 8000556:	43ac      	bics	r4, r5
 8000558:	4321      	orrs	r1, r4
 800055a:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800055c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	2503      	movs	r5, #3
 8000560:	0883      	lsrs	r3, r0, #2
 8000562:	4028      	ands	r0, r5
 8000564:	40a8      	lsls	r0, r5
 8000566:	35fc      	adds	r5, #252	; 0xfc
 8000568:	002e      	movs	r6, r5
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_NVIC_SetPriority+0x5c>)
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	189b      	adds	r3, r3, r2
 8000570:	22c0      	movs	r2, #192	; 0xc0
 8000572:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000574:	4029      	ands	r1, r5
 8000576:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	589c      	ldr	r4, [r3, r2]
 800057c:	43b4      	bics	r4, r6
 800057e:	4321      	orrs	r1, r4
 8000580:	5099      	str	r1, [r3, r2]
 8000582:	e7eb      	b.n	800055c <HAL_NVIC_SetPriority+0x30>
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	e000e100 	.word	0xe000e100

0800058c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <HAL_SYSTICK_Config+0x28>)
 800058e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000590:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000592:	4293      	cmp	r3, r2
 8000594:	d80d      	bhi.n	80005b2 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000596:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059a:	4808      	ldr	r0, [pc, #32]	; (80005bc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800059c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059e:	6a03      	ldr	r3, [r0, #32]
 80005a0:	0609      	lsls	r1, r1, #24
 80005a2:	021b      	lsls	r3, r3, #8
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005aa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ac:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ae:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005b0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005b2:	4770      	bx	lr
 80005b4:	00ffffff 	.word	0x00ffffff
 80005b8:	e000e010 	.word	0xe000e010
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005c2:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005c4:	2804      	cmp	r0, #4
 80005c6:	d102      	bne.n	80005ce <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005c8:	4310      	orrs	r0, r2
 80005ca:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80005cc:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005ce:	2104      	movs	r1, #4
 80005d0:	438a      	bics	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	e7fa      	b.n	80005cc <HAL_SYSTICK_CLKSourceConfig+0xc>
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	e000e010 	.word	0xe000e010

080005dc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80005dc:	4770      	bx	lr

080005de <HAL_SYSTICK_IRQHandler>:
{
 80005de:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80005e0:	f7ff fffc 	bl	80005dc <HAL_SYSTICK_Callback>
}
 80005e4:	bd10      	pop	{r4, pc}
	...

080005e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ea:	4a53      	ldr	r2, [pc, #332]	; (8000738 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005ec:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ee:	1882      	adds	r2, r0, r2
 80005f0:	1e54      	subs	r4, r2, #1
 80005f2:	41a2      	sbcs	r2, r4
{
 80005f4:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005f6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005f8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005fa:	3205      	adds	r2, #5
 80005fc:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005fe:	9a01      	ldr	r2, [sp, #4]
 8000600:	40da      	lsrs	r2, r3
 8000602:	d101      	bne.n	8000608 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000604:	b005      	add	sp, #20
 8000606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000608:	2501      	movs	r5, #1
 800060a:	409d      	lsls	r5, r3
 800060c:	9a01      	ldr	r2, [sp, #4]
 800060e:	402a      	ands	r2, r5
 8000610:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000612:	d100      	bne.n	8000616 <HAL_GPIO_Init+0x2e>
 8000614:	e08d      	b.n	8000732 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000616:	684a      	ldr	r2, [r1, #4]
 8000618:	4694      	mov	ip, r2
 800061a:	2210      	movs	r2, #16
 800061c:	4664      	mov	r4, ip
 800061e:	4394      	bics	r4, r2
 8000620:	0022      	movs	r2, r4
 8000622:	3c01      	subs	r4, #1
 8000624:	2a02      	cmp	r2, #2
 8000626:	d11f      	bne.n	8000668 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000628:	2407      	movs	r4, #7
 800062a:	270f      	movs	r7, #15
 800062c:	401c      	ands	r4, r3
 800062e:	00a4      	lsls	r4, r4, #2
 8000630:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000632:	08da      	lsrs	r2, r3, #3
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	1882      	adds	r2, r0, r2
 8000638:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800063a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800063c:	690f      	ldr	r7, [r1, #16]
 800063e:	40a7      	lsls	r7, r4
 8000640:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000642:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000644:	2403      	movs	r4, #3
 8000646:	005e      	lsls	r6, r3, #1
 8000648:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800064a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800064c:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800064e:	68cc      	ldr	r4, [r1, #12]
 8000650:	40b4      	lsls	r4, r6
 8000652:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000654:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000656:	4662      	mov	r2, ip
 8000658:	06d2      	lsls	r2, r2, #27
 800065a:	0fd2      	lsrs	r2, r2, #31
 800065c:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800065e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000660:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000662:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000664:	6042      	str	r2, [r0, #4]
 8000666:	e001      	b.n	800066c <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000668:	2c01      	cmp	r4, #1
 800066a:	d9eb      	bls.n	8000644 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800066c:	2603      	movs	r6, #3
 800066e:	0034      	movs	r4, r6
 8000670:	005d      	lsls	r5, r3, #1
 8000672:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000674:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000676:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000678:	4032      	ands	r2, r6
 800067a:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800067c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800067e:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000680:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000682:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000684:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000686:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000688:	688a      	ldr	r2, [r1, #8]
 800068a:	40aa      	lsls	r2, r5
 800068c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800068e:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000690:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000692:	00d2      	lsls	r2, r2, #3
 8000694:	d54d      	bpl.n	8000732 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	2501      	movs	r5, #1
 8000698:	4c28      	ldr	r4, [pc, #160]	; (800073c <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800069a:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800069e:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006a0:	001d      	movs	r5, r3
 80006a2:	4035      	ands	r5, r6
 80006a4:	00ad      	lsls	r5, r5, #2
 80006a6:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a8:	6362      	str	r2, [r4, #52]	; 0x34
 80006aa:	4a25      	ldr	r2, [pc, #148]	; (8000740 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80006ac:	089c      	lsrs	r4, r3, #2
 80006ae:	00a4      	lsls	r4, r4, #2
 80006b0:	18a4      	adds	r4, r4, r2
 80006b2:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b4:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006b6:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80006b8:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006ba:	05ff      	lsls	r7, r7, #23
 80006bc:	2200      	movs	r2, #0
 80006be:	42b8      	cmp	r0, r7
 80006c0:	d00c      	beq.n	80006dc <HAL_GPIO_Init+0xf4>
 80006c2:	4f20      	ldr	r7, [pc, #128]	; (8000744 <HAL_GPIO_Init+0x15c>)
 80006c4:	3201      	adds	r2, #1
 80006c6:	42b8      	cmp	r0, r7
 80006c8:	d008      	beq.n	80006dc <HAL_GPIO_Init+0xf4>
 80006ca:	4f1f      	ldr	r7, [pc, #124]	; (8000748 <HAL_GPIO_Init+0x160>)
 80006cc:	3201      	adds	r2, #1
 80006ce:	42b8      	cmp	r0, r7
 80006d0:	d004      	beq.n	80006dc <HAL_GPIO_Init+0xf4>
 80006d2:	4f1e      	ldr	r7, [pc, #120]	; (800074c <HAL_GPIO_Init+0x164>)
 80006d4:	0032      	movs	r2, r6
 80006d6:	42b8      	cmp	r0, r7
 80006d8:	d000      	beq.n	80006dc <HAL_GPIO_Init+0xf4>
 80006da:	9a03      	ldr	r2, [sp, #12]
 80006dc:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006de:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006e0:	9d02      	ldr	r5, [sp, #8]
 80006e2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006e4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006e6:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 80006e8:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006ea:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006ec:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ee:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006f0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006f2:	03ff      	lsls	r7, r7, #15
 80006f4:	d401      	bmi.n	80006fa <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 80006f6:	0035      	movs	r5, r6
 80006f8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006fa:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006fc:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006fe:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000700:	9d00      	ldr	r5, [sp, #0]
 8000702:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000704:	03bf      	lsls	r7, r7, #14
 8000706:	d401      	bmi.n	800070c <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000708:	0035      	movs	r5, r6
 800070a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800070c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800070e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000710:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000712:	9d00      	ldr	r5, [sp, #0]
 8000714:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	02ff      	lsls	r7, r7, #11
 8000718:	d401      	bmi.n	800071e <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800071a:	0035      	movs	r5, r6
 800071c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800071e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000720:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000722:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000724:	9e00      	ldr	r6, [sp, #0]
 8000726:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000728:	02bf      	lsls	r7, r7, #10
 800072a:	d401      	bmi.n	8000730 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 800072c:	4025      	ands	r5, r4
 800072e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000730:	60d6      	str	r6, [r2, #12]
    position++;
 8000732:	3301      	adds	r3, #1
 8000734:	e763      	b.n	80005fe <HAL_GPIO_Init+0x16>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	afffe400 	.word	0xafffe400
 800073c:	40021000 	.word	0x40021000
 8000740:	40010000 	.word	0x40010000
 8000744:	50000400 	.word	0x50000400
 8000748:	50000800 	.word	0x50000800
 800074c:	50000c00 	.word	0x50000c00
 8000750:	40010400 	.word	0x40010400

08000754 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000754:	6900      	ldr	r0, [r0, #16]
 8000756:	4008      	ands	r0, r1
 8000758:	1e41      	subs	r1, r0, #1
 800075a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800075c:	b2c0      	uxtb	r0, r0
}
 800075e:	4770      	bx	lr

08000760 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000760:	2a00      	cmp	r2, #0
 8000762:	d001      	beq.n	8000768 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000764:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000766:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000768:	6281      	str	r1, [r0, #40]	; 0x28
}
 800076a:	e7fc      	b.n	8000766 <HAL_GPIO_WritePin+0x6>

0800076c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800076c:	22f0      	movs	r2, #240	; 0xf0
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8000770:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000772:	68d9      	ldr	r1, [r3, #12]
 8000774:	4211      	tst	r1, r2
 8000776:	d00b      	beq.n	8000790 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000778:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800077a:	2101      	movs	r1, #1
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800077e:	6802      	ldr	r2, [r0, #0]
 8000780:	438a      	bics	r2, r1
 8000782:	431a      	orrs	r2, r3
 8000784:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000786:	6800      	ldr	r0, [r0, #0]
 8000788:	4008      	ands	r0, r1
 800078a:	4058      	eors	r0, r3
 800078c:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800078e:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000796:	0549      	lsls	r1, r1, #21
 8000798:	4c0e      	ldr	r4, [pc, #56]	; (80007d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800079a:	0152      	lsls	r2, r2, #5
 800079c:	420d      	tst	r5, r1
 800079e:	d00a      	beq.n	80007b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80007a4:	23c0      	movs	r3, #192	; 0xc0
 80007a6:	015b      	lsls	r3, r3, #5
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d1e5      	bne.n	8000778 <RCC_SetFlashLatencyFromMSIRange+0xc>
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80007ae:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80007b0:	4243      	negs	r3, r0
 80007b2:	4143      	adcs	r3, r0
 80007b4:	e7e1      	b.n	800077a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80007b8:	4329      	orrs	r1, r5
 80007ba:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80007bc:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80007be:	4c07      	ldr	r4, [pc, #28]	; (80007dc <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80007c0:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 80007c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007c4:	4021      	ands	r1, r4
 80007c6:	6399      	str	r1, [r3, #56]	; 0x38
 80007c8:	e7ec      	b.n	80007a4 <RCC_SetFlashLatencyFromMSIRange+0x38>
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40022000 	.word	0x40022000
 80007d4:	40007000 	.word	0x40007000
 80007d8:	ffff4000 	.word	0xffff4000
 80007dc:	efffffff 	.word	0xefffffff

080007e0 <HAL_RCC_OscConfig>:
{
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e2:	6803      	ldr	r3, [r0, #0]
{
 80007e4:	b085      	sub	sp, #20
 80007e6:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e8:	07db      	lsls	r3, r3, #31
 80007ea:	d44e      	bmi.n	800088a <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	079b      	lsls	r3, r3, #30
 80007f0:	d500      	bpl.n	80007f4 <HAL_RCC_OscConfig+0x14>
 80007f2:	e09f      	b.n	8000934 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	06db      	lsls	r3, r3, #27
 80007f8:	d535      	bpl.n	8000866 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80007fa:	230c      	movs	r3, #12
 80007fc:	4dbc      	ldr	r5, [pc, #752]	; (8000af0 <HAL_RCC_OscConfig+0x310>)
 80007fe:	68ea      	ldr	r2, [r5, #12]
 8000800:	421a      	tst	r2, r3
 8000802:	d000      	beq.n	8000806 <HAL_RCC_OscConfig+0x26>
 8000804:	e0e9      	b.n	80009da <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000806:	682b      	ldr	r3, [r5, #0]
 8000808:	059b      	lsls	r3, r3, #22
 800080a:	d502      	bpl.n	8000812 <HAL_RCC_OscConfig+0x32>
 800080c:	69e3      	ldr	r3, [r4, #28]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d050      	beq.n	80008b4 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000812:	22e0      	movs	r2, #224	; 0xe0
 8000814:	686b      	ldr	r3, [r5, #4]
 8000816:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000818:	0212      	lsls	r2, r2, #8
 800081a:	4013      	ands	r3, r2
 800081c:	4298      	cmp	r0, r3
 800081e:	d800      	bhi.n	8000822 <HAL_RCC_OscConfig+0x42>
 8000820:	e0c9      	b.n	80009b6 <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000822:	f7ff ffa3 	bl	800076c <RCC_SetFlashLatencyFromMSIRange>
 8000826:	2800      	cmp	r0, #0
 8000828:	d144      	bne.n	80008b4 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800082a:	686b      	ldr	r3, [r5, #4]
 800082c:	4ab1      	ldr	r2, [pc, #708]	; (8000af4 <HAL_RCC_OscConfig+0x314>)
 800082e:	4013      	ands	r3, r2
 8000830:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000832:	4313      	orrs	r3, r2
 8000834:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000836:	686a      	ldr	r2, [r5, #4]
 8000838:	6a23      	ldr	r3, [r4, #32]
 800083a:	0212      	lsls	r2, r2, #8
 800083c:	061b      	lsls	r3, r3, #24
 800083e:	0a12      	lsrs	r2, r2, #8
 8000840:	4313      	orrs	r3, r2
 8000842:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000844:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000846:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000848:	0b59      	lsrs	r1, r3, #13
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	3101      	adds	r1, #1
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000852:	0612      	lsls	r2, r2, #24
 8000854:	49a8      	ldr	r1, [pc, #672]	; (8000af8 <HAL_RCC_OscConfig+0x318>)
 8000856:	0f12      	lsrs	r2, r2, #28
 8000858:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800085c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800085e:	4aa7      	ldr	r2, [pc, #668]	; (8000afc <HAL_RCC_OscConfig+0x31c>)
 8000860:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000862:	f7ff fe25 	bl	80004b0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	071b      	lsls	r3, r3, #28
 800086a:	d500      	bpl.n	800086e <HAL_RCC_OscConfig+0x8e>
 800086c:	e0ec      	b.n	8000a48 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	075b      	lsls	r3, r3, #29
 8000872:	d500      	bpl.n	8000876 <HAL_RCC_OscConfig+0x96>
 8000874:	e10f      	b.n	8000a96 <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	069b      	lsls	r3, r3, #26
 800087a:	d500      	bpl.n	800087e <HAL_RCC_OscConfig+0x9e>
 800087c:	e190      	b.n	8000ba0 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800087e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000880:	2900      	cmp	r1, #0
 8000882:	d000      	beq.n	8000886 <HAL_RCC_OscConfig+0xa6>
 8000884:	e1c0      	b.n	8000c08 <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 8000886:	2000      	movs	r0, #0
 8000888:	e015      	b.n	80008b6 <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800088a:	210c      	movs	r1, #12
 800088c:	4d98      	ldr	r5, [pc, #608]	; (8000af0 <HAL_RCC_OscConfig+0x310>)
 800088e:	68eb      	ldr	r3, [r5, #12]
 8000890:	400b      	ands	r3, r1
 8000892:	2b08      	cmp	r3, #8
 8000894:	d008      	beq.n	80008a8 <HAL_RCC_OscConfig+0xc8>
 8000896:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000898:	68ea      	ldr	r2, [r5, #12]
 800089a:	025b      	lsls	r3, r3, #9
 800089c:	400a      	ands	r2, r1
 800089e:	428a      	cmp	r2, r1
 80008a0:	d10b      	bne.n	80008ba <HAL_RCC_OscConfig+0xda>
 80008a2:	68ea      	ldr	r2, [r5, #12]
 80008a4:	421a      	tst	r2, r3
 80008a6:	d008      	beq.n	80008ba <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	039b      	lsls	r3, r3, #14
 80008ac:	d59e      	bpl.n	80007ec <HAL_RCC_OscConfig+0xc>
 80008ae:	6863      	ldr	r3, [r4, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d19b      	bne.n	80007ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80008b4:	2001      	movs	r0, #1
}
 80008b6:	b005      	add	sp, #20
 80008b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	6862      	ldr	r2, [r4, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d112      	bne.n	80008e6 <HAL_RCC_OscConfig+0x106>
 80008c0:	682a      	ldr	r2, [r5, #0]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008c6:	f7ff fe1f 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	02b6      	lsls	r6, r6, #10
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	4233      	tst	r3, r6
 80008d4:	d000      	beq.n	80008d8 <HAL_RCC_OscConfig+0xf8>
 80008d6:	e789      	b.n	80007ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fe16 	bl	8000508 <HAL_GetTick>
 80008dc:	1bc0      	subs	r0, r0, r7
 80008de:	2864      	cmp	r0, #100	; 0x64
 80008e0:	d9f6      	bls.n	80008d0 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
 80008e4:	e7e7      	b.n	80008b6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e6:	21a0      	movs	r1, #160	; 0xa0
 80008e8:	02c9      	lsls	r1, r1, #11
 80008ea:	428a      	cmp	r2, r1
 80008ec:	d105      	bne.n	80008fa <HAL_RCC_OscConfig+0x11a>
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	6829      	ldr	r1, [r5, #0]
 80008f2:	02d2      	lsls	r2, r2, #11
 80008f4:	430a      	orrs	r2, r1
 80008f6:	602a      	str	r2, [r5, #0]
 80008f8:	e7e2      	b.n	80008c0 <HAL_RCC_OscConfig+0xe0>
 80008fa:	6829      	ldr	r1, [r5, #0]
 80008fc:	4880      	ldr	r0, [pc, #512]	; (8000b00 <HAL_RCC_OscConfig+0x320>)
 80008fe:	4001      	ands	r1, r0
 8000900:	6029      	str	r1, [r5, #0]
 8000902:	6829      	ldr	r1, [r5, #0]
 8000904:	400b      	ands	r3, r1
 8000906:	9303      	str	r3, [sp, #12]
 8000908:	9b03      	ldr	r3, [sp, #12]
 800090a:	497e      	ldr	r1, [pc, #504]	; (8000b04 <HAL_RCC_OscConfig+0x324>)
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	400b      	ands	r3, r1
 8000910:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000912:	2a00      	cmp	r2, #0
 8000914:	d1d7      	bne.n	80008c6 <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 8000916:	f7ff fdf7 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800091c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	02b6      	lsls	r6, r6, #10
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	4233      	tst	r3, r6
 8000924:	d100      	bne.n	8000928 <HAL_RCC_OscConfig+0x148>
 8000926:	e761      	b.n	80007ec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000928:	f7ff fdee 	bl	8000508 <HAL_GetTick>
 800092c:	1bc0      	subs	r0, r0, r7
 800092e:	2864      	cmp	r0, #100	; 0x64
 8000930:	d9f6      	bls.n	8000920 <HAL_RCC_OscConfig+0x140>
 8000932:	e7d6      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000934:	210c      	movs	r1, #12
 8000936:	4d6e      	ldr	r5, [pc, #440]	; (8000af0 <HAL_RCC_OscConfig+0x310>)
 8000938:	68ea      	ldr	r2, [r5, #12]
 800093a:	400a      	ands	r2, r1
 800093c:	2a04      	cmp	r2, #4
 800093e:	d006      	beq.n	800094e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000940:	68eb      	ldr	r3, [r5, #12]
 8000942:	400b      	ands	r3, r1
 8000944:	428b      	cmp	r3, r1
 8000946:	d110      	bne.n	800096a <HAL_RCC_OscConfig+0x18a>
 8000948:	68eb      	ldr	r3, [r5, #12]
 800094a:	03db      	lsls	r3, r3, #15
 800094c:	d40d      	bmi.n	800096a <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	075b      	lsls	r3, r3, #29
 8000952:	d502      	bpl.n	800095a <HAL_RCC_OscConfig+0x17a>
 8000954:	68e3      	ldr	r3, [r4, #12]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d1ac      	bne.n	80008b4 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095a:	686a      	ldr	r2, [r5, #4]
 800095c:	6923      	ldr	r3, [r4, #16]
 800095e:	496a      	ldr	r1, [pc, #424]	; (8000b08 <HAL_RCC_OscConfig+0x328>)
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	400a      	ands	r2, r1
 8000964:	4313      	orrs	r3, r2
 8000966:	606b      	str	r3, [r5, #4]
 8000968:	e744      	b.n	80007f4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800096a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800096c:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800096e:	2a00      	cmp	r2, #0
 8000970:	d010      	beq.n	8000994 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000972:	2109      	movs	r1, #9
 8000974:	438b      	bics	r3, r1
 8000976:	4313      	orrs	r3, r2
 8000978:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800097a:	f7ff fdc5 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800097e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000980:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000982:	682b      	ldr	r3, [r5, #0]
 8000984:	4233      	tst	r3, r6
 8000986:	d1e8      	bne.n	800095a <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000988:	f7ff fdbe 	bl	8000508 <HAL_GetTick>
 800098c:	1bc0      	subs	r0, r0, r7
 800098e:	2802      	cmp	r0, #2
 8000990:	d9f7      	bls.n	8000982 <HAL_RCC_OscConfig+0x1a2>
 8000992:	e7a6      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8000994:	2201      	movs	r2, #1
 8000996:	4393      	bics	r3, r2
 8000998:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800099a:	f7ff fdb5 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80009a0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	4233      	tst	r3, r6
 80009a6:	d100      	bne.n	80009aa <HAL_RCC_OscConfig+0x1ca>
 80009a8:	e724      	b.n	80007f4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009aa:	f7ff fdad 	bl	8000508 <HAL_GetTick>
 80009ae:	1bc0      	subs	r0, r0, r7
 80009b0:	2802      	cmp	r0, #2
 80009b2:	d9f6      	bls.n	80009a2 <HAL_RCC_OscConfig+0x1c2>
 80009b4:	e795      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009b6:	686b      	ldr	r3, [r5, #4]
 80009b8:	4a4e      	ldr	r2, [pc, #312]	; (8000af4 <HAL_RCC_OscConfig+0x314>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	4303      	orrs	r3, r0
 80009be:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009c0:	686a      	ldr	r2, [r5, #4]
 80009c2:	6a23      	ldr	r3, [r4, #32]
 80009c4:	0212      	lsls	r2, r2, #8
 80009c6:	061b      	lsls	r3, r3, #24
 80009c8:	0a12      	lsrs	r2, r2, #8
 80009ca:	4313      	orrs	r3, r2
 80009cc:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009ce:	f7ff fecd 	bl	800076c <RCC_SetFlashLatencyFromMSIRange>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d100      	bne.n	80009d8 <HAL_RCC_OscConfig+0x1f8>
 80009d6:	e735      	b.n	8000844 <HAL_RCC_OscConfig+0x64>
 80009d8:	e76c      	b.n	80008b4 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009da:	69e3      	ldr	r3, [r4, #28]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d020      	beq.n	8000a22 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	682a      	ldr	r2, [r5, #0]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4313      	orrs	r3, r2
 80009e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fd8d 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009ee:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80009f2:	00b6      	lsls	r6, r6, #2
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	4233      	tst	r3, r6
 80009f8:	d00d      	beq.n	8000a16 <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009fa:	686b      	ldr	r3, [r5, #4]
 80009fc:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <HAL_RCC_OscConfig+0x314>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a02:	4313      	orrs	r3, r2
 8000a04:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a06:	686a      	ldr	r2, [r5, #4]
 8000a08:	6a23      	ldr	r3, [r4, #32]
 8000a0a:	0212      	lsls	r2, r2, #8
 8000a0c:	061b      	lsls	r3, r3, #24
 8000a0e:	0a12      	lsrs	r2, r2, #8
 8000a10:	4313      	orrs	r3, r2
 8000a12:	606b      	str	r3, [r5, #4]
 8000a14:	e727      	b.n	8000866 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a16:	f7ff fd77 	bl	8000508 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	2802      	cmp	r0, #2
 8000a1e:	d9e9      	bls.n	80009f4 <HAL_RCC_OscConfig+0x214>
 8000a20:	e75f      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000a26:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8000a28:	4013      	ands	r3, r2
 8000a2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fd6c 	bl	8000508 <HAL_GetTick>
 8000a30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000a32:	00b6      	lsls	r6, r6, #2
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	4233      	tst	r3, r6
 8000a38:	d100      	bne.n	8000a3c <HAL_RCC_OscConfig+0x25c>
 8000a3a:	e714      	b.n	8000866 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a3c:	f7ff fd64 	bl	8000508 <HAL_GetTick>
 8000a40:	1bc0      	subs	r0, r0, r7
 8000a42:	2802      	cmp	r0, #2
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCC_OscConfig+0x254>
 8000a46:	e74c      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a48:	6962      	ldr	r2, [r4, #20]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	4d28      	ldr	r5, [pc, #160]	; (8000af0 <HAL_RCC_OscConfig+0x310>)
 8000a4e:	2a00      	cmp	r2, #0
 8000a50:	d010      	beq.n	8000a74 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 8000a52:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a54:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000a56:	4313      	orrs	r3, r2
 8000a58:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fd55 	bl	8000508 <HAL_GetTick>
 8000a5e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a62:	4233      	tst	r3, r6
 8000a64:	d000      	beq.n	8000a68 <HAL_RCC_OscConfig+0x288>
 8000a66:	e702      	b.n	800086e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fd4e 	bl	8000508 <HAL_GetTick>
 8000a6c:	1bc0      	subs	r0, r0, r7
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f6      	bls.n	8000a60 <HAL_RCC_OscConfig+0x280>
 8000a72:	e736      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000a74:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a76:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a78:	439a      	bics	r2, r3
 8000a7a:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fd44 	bl	8000508 <HAL_GetTick>
 8000a80:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a82:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a84:	4233      	tst	r3, r6
 8000a86:	d100      	bne.n	8000a8a <HAL_RCC_OscConfig+0x2aa>
 8000a88:	e6f1      	b.n	800086e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a8a:	f7ff fd3d 	bl	8000508 <HAL_GetTick>
 8000a8e:	1bc0      	subs	r0, r0, r7
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9f6      	bls.n	8000a82 <HAL_RCC_OscConfig+0x2a2>
 8000a94:	e725      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a96:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a98:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a9a:	4d15      	ldr	r5, [pc, #84]	; (8000af0 <HAL_RCC_OscConfig+0x310>)
 8000a9c:	055b      	lsls	r3, r3, #21
 8000a9e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000aa0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa2:	421a      	tst	r2, r3
 8000aa4:	d104      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8000aac:	2301      	movs	r3, #1
 8000aae:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab0:	2780      	movs	r7, #128	; 0x80
 8000ab2:	4e17      	ldr	r6, [pc, #92]	; (8000b10 <HAL_RCC_OscConfig+0x330>)
 8000ab4:	007f      	lsls	r7, r7, #1
 8000ab6:	6833      	ldr	r3, [r6, #0]
 8000ab8:	423b      	tst	r3, r7
 8000aba:	d008      	beq.n	8000ace <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	68a3      	ldr	r3, [r4, #8]
 8000ac0:	0052      	lsls	r2, r2, #1
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d126      	bne.n	8000b14 <HAL_RCC_OscConfig+0x334>
 8000ac6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	652b      	str	r3, [r5, #80]	; 0x50
 8000acc:	e047      	b.n	8000b5e <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ace:	6833      	ldr	r3, [r6, #0]
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ad4:	f7ff fd18 	bl	8000508 <HAL_GetTick>
 8000ad8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ada:	6833      	ldr	r3, [r6, #0]
 8000adc:	423b      	tst	r3, r7
 8000ade:	d1ed      	bne.n	8000abc <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae0:	f7ff fd12 	bl	8000508 <HAL_GetTick>
 8000ae4:	9b01      	ldr	r3, [sp, #4]
 8000ae6:	1ac0      	subs	r0, r0, r3
 8000ae8:	2864      	cmp	r0, #100	; 0x64
 8000aea:	d9f6      	bls.n	8000ada <HAL_RCC_OscConfig+0x2fa>
 8000aec:	e6f9      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40021000 	.word	0x40021000
 8000af4:	ffff1fff 	.word	0xffff1fff
 8000af8:	08000f14 	.word	0x08000f14
 8000afc:	20000000 	.word	0x20000000
 8000b00:	fffeffff 	.word	0xfffeffff
 8000b04:	fffbffff 	.word	0xfffbffff
 8000b08:	ffffe0ff 	.word	0xffffe0ff
 8000b0c:	fffffeff 	.word	0xfffffeff
 8000b10:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d116      	bne.n	8000b46 <HAL_RCC_OscConfig+0x366>
 8000b18:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b1a:	4a60      	ldr	r2, [pc, #384]	; (8000c9c <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b1c:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b1e:	4013      	ands	r3, r2
 8000b20:	652b      	str	r3, [r5, #80]	; 0x50
 8000b22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b24:	4a5e      	ldr	r2, [pc, #376]	; (8000ca0 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b26:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	4013      	ands	r3, r2
 8000b2a:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b2c:	f7ff fcec 	bl	8000508 <HAL_GetTick>
 8000b30:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b32:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b34:	423b      	tst	r3, r7
 8000b36:	d02a      	beq.n	8000b8e <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b38:	f7ff fce6 	bl	8000508 <HAL_GetTick>
 8000b3c:	4b59      	ldr	r3, [pc, #356]	; (8000ca4 <HAL_RCC_OscConfig+0x4c4>)
 8000b3e:	1b80      	subs	r0, r0, r6
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d9f6      	bls.n	8000b32 <HAL_RCC_OscConfig+0x352>
 8000b44:	e6cd      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b46:	21a0      	movs	r1, #160	; 0xa0
 8000b48:	00c9      	lsls	r1, r1, #3
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d10d      	bne.n	8000b6a <HAL_RCC_OscConfig+0x38a>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	430b      	orrs	r3, r1
 8000b56:	652b      	str	r3, [r5, #80]	; 0x50
 8000b58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fcd3 	bl	8000508 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b62:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8000b64:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b66:	00bf      	lsls	r7, r7, #2
 8000b68:	e00e      	b.n	8000b88 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b6c:	4a4b      	ldr	r2, [pc, #300]	; (8000c9c <HAL_RCC_OscConfig+0x4bc>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	652b      	str	r3, [r5, #80]	; 0x50
 8000b72:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b74:	4a4a      	ldr	r2, [pc, #296]	; (8000ca0 <HAL_RCC_OscConfig+0x4c0>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	e7a7      	b.n	8000aca <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7a:	f7ff fcc5 	bl	8000508 <HAL_GetTick>
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	1b80      	subs	r0, r0, r6
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d900      	bls.n	8000b88 <HAL_RCC_OscConfig+0x3a8>
 8000b86:	e6ac      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b8a:	423b      	tst	r3, r7
 8000b8c:	d0f5      	beq.n	8000b7a <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000b8e:	9b00      	ldr	r3, [sp, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d000      	beq.n	8000b96 <HAL_RCC_OscConfig+0x3b6>
 8000b94:	e66f      	b.n	8000876 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b96:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b98:	4a43      	ldr	r2, [pc, #268]	; (8000ca8 <HAL_RCC_OscConfig+0x4c8>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	63ab      	str	r3, [r5, #56]	; 0x38
 8000b9e:	e66a      	b.n	8000876 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000ba0:	69a1      	ldr	r1, [r4, #24]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	4d41      	ldr	r5, [pc, #260]	; (8000cac <HAL_RCC_OscConfig+0x4cc>)
 8000ba6:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <HAL_RCC_OscConfig+0x4d0>)
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d018      	beq.n	8000bde <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8000bac:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000bae:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	60a9      	str	r1, [r5, #8]
 8000bb4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	636b      	str	r3, [r5, #52]	; 0x34
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	6a11      	ldr	r1, [r2, #32]
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fca0 	bl	8000508 <HAL_GetTick>
 8000bc8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000bca:	68ab      	ldr	r3, [r5, #8]
 8000bcc:	4233      	tst	r3, r6
 8000bce:	d000      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x3f2>
 8000bd0:	e655      	b.n	800087e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bd2:	f7ff fc99 	bl	8000508 <HAL_GetTick>
 8000bd6:	1bc0      	subs	r0, r0, r7
 8000bd8:	2802      	cmp	r0, #2
 8000bda:	d9f6      	bls.n	8000bca <HAL_RCC_OscConfig+0x3ea>
 8000bdc:	e681      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8000bde:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000be0:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 8000be2:	4399      	bics	r1, r3
 8000be4:	60a9      	str	r1, [r5, #8]
 8000be6:	6a13      	ldr	r3, [r2, #32]
 8000be8:	4932      	ldr	r1, [pc, #200]	; (8000cb4 <HAL_RCC_OscConfig+0x4d4>)
 8000bea:	400b      	ands	r3, r1
 8000bec:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bee:	f7ff fc8b 	bl	8000508 <HAL_GetTick>
 8000bf2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000bf4:	68ab      	ldr	r3, [r5, #8]
 8000bf6:	4233      	tst	r3, r6
 8000bf8:	d100      	bne.n	8000bfc <HAL_RCC_OscConfig+0x41c>
 8000bfa:	e640      	b.n	800087e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bfc:	f7ff fc84 	bl	8000508 <HAL_GetTick>
 8000c00:	1bc0      	subs	r0, r0, r7
 8000c02:	2802      	cmp	r0, #2
 8000c04:	d9f6      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x414>
 8000c06:	e66c      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c08:	220c      	movs	r2, #12
 8000c0a:	4d28      	ldr	r5, [pc, #160]	; (8000cac <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c0e:	68eb      	ldr	r3, [r5, #12]
 8000c10:	4013      	ands	r3, r2
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d100      	bne.n	8000c18 <HAL_RCC_OscConfig+0x438>
 8000c16:	e64e      	b.n	80008b6 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8000c18:	682b      	ldr	r3, [r5, #0]
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_RCC_OscConfig+0x4d8>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c20:	2902      	cmp	r1, #2
 8000c22:	d12b      	bne.n	8000c7c <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8000c24:	f7ff fc70 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c28:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2c:	04b6      	lsls	r6, r6, #18
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	4233      	tst	r3, r6
 8000c32:	d11d      	bne.n	8000c70 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000c36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c38:	68ea      	ldr	r2, [r5, #12]
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	491f      	ldr	r1, [pc, #124]	; (8000cbc <HAL_RCC_OscConfig+0x4dc>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	4313      	orrs	r3, r2
 8000c42:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c44:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	682a      	ldr	r2, [r5, #0]
 8000c4e:	045b      	lsls	r3, r3, #17
 8000c50:	4313      	orrs	r3, r2
 8000c52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c54:	f7ff fc58 	bl	8000508 <HAL_GetTick>
 8000c58:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c5a:	04a4      	lsls	r4, r4, #18
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	4223      	tst	r3, r4
 8000c60:	d000      	beq.n	8000c64 <HAL_RCC_OscConfig+0x484>
 8000c62:	e610      	b.n	8000886 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c64:	f7ff fc50 	bl	8000508 <HAL_GetTick>
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9f6      	bls.n	8000c5c <HAL_RCC_OscConfig+0x47c>
 8000c6e:	e638      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c70:	f7ff fc4a 	bl	8000508 <HAL_GetTick>
 8000c74:	1bc0      	subs	r0, r0, r7
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d9d9      	bls.n	8000c2e <HAL_RCC_OscConfig+0x44e>
 8000c7a:	e632      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc44 	bl	8000508 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c80:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c84:	04a4      	lsls	r4, r4, #18
 8000c86:	682b      	ldr	r3, [r5, #0]
 8000c88:	4223      	tst	r3, r4
 8000c8a:	d100      	bne.n	8000c8e <HAL_RCC_OscConfig+0x4ae>
 8000c8c:	e5fb      	b.n	8000886 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c8e:	f7ff fc3b 	bl	8000508 <HAL_GetTick>
 8000c92:	1b80      	subs	r0, r0, r6
 8000c94:	2802      	cmp	r0, #2
 8000c96:	d9f6      	bls.n	8000c86 <HAL_RCC_OscConfig+0x4a6>
 8000c98:	e623      	b.n	80008e2 <HAL_RCC_OscConfig+0x102>
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	fffffeff 	.word	0xfffffeff
 8000ca0:	fffffbff 	.word	0xfffffbff
 8000ca4:	00001388 	.word	0x00001388
 8000ca8:	efffffff 	.word	0xefffffff
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010000 	.word	0x40010000
 8000cb4:	ffffdfff 	.word	0xffffdfff
 8000cb8:	feffffff 	.word	0xfeffffff
 8000cbc:	ff02ffff 	.word	0xff02ffff

08000cc0 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8000cc0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000cc4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000cc6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	2a08      	cmp	r2, #8
 8000ccc:	d026      	beq.n	8000d1c <HAL_RCC_GetSysClockFreq+0x5c>
 8000cce:	2a0c      	cmp	r2, #12
 8000cd0:	d006      	beq.n	8000ce0 <HAL_RCC_GetSysClockFreq+0x20>
 8000cd2:	2a04      	cmp	r2, #4
 8000cd4:	d11a      	bne.n	8000d0c <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	06db      	lsls	r3, r3, #27
 8000cda:	d421      	bmi.n	8000d20 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8000cde:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000ce0:	028a      	lsls	r2, r1, #10
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000ce4:	0f12      	lsrs	r2, r2, #28
 8000ce6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000ce8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cea:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8000cec:	0f89      	lsrs	r1, r1, #30
 8000cee:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cf0:	03c0      	lsls	r0, r0, #15
 8000cf2:	d504      	bpl.n	8000cfe <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000cf6:	4350      	muls	r0, r2
 8000cf8:	f7ff fa06 	bl	8000108 <__udivsi3>
 8000cfc:	e7ef      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	06db      	lsls	r3, r3, #27
 8000d02:	d501      	bpl.n	8000d08 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x74>)
 8000d06:	e7f6      	b.n	8000cf6 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <HAL_RCC_GetSysClockFreq+0x68>)
 8000d0a:	e7f4      	b.n	8000cf6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000d0c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000d0e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000d10:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000d12:	041b      	lsls	r3, r3, #16
 8000d14:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8000d16:	3301      	adds	r3, #1
 8000d18:	4098      	lsls	r0, r3
 8000d1a:	e7e0      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <HAL_RCC_GetSysClockFreq+0x70>)
 8000d1e:	e7de      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000d22:	e7dc      	b.n	8000cde <HAL_RCC_GetSysClockFreq+0x1e>
 8000d24:	40021000 	.word	0x40021000
 8000d28:	00f42400 	.word	0x00f42400
 8000d2c:	08000f24 	.word	0x08000f24
 8000d30:	007a1200 	.word	0x007a1200
 8000d34:	003d0900 	.word	0x003d0900

08000d38 <HAL_RCC_ClockConfig>:
{
 8000d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4c53      	ldr	r4, [pc, #332]	; (8000e8c <HAL_RCC_ClockConfig+0x154>)
{
 8000d3e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d40:	6823      	ldr	r3, [r4, #0]
{
 8000d42:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d44:	4013      	ands	r3, r2
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d328      	bcc.n	8000d9c <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4a:	6832      	ldr	r2, [r6, #0]
 8000d4c:	0793      	lsls	r3, r2, #30
 8000d4e:	d431      	bmi.n	8000db4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d50:	07d3      	lsls	r3, r2, #31
 8000d52:	d437      	bmi.n	8000dc4 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d54:	2301      	movs	r3, #1
 8000d56:	6822      	ldr	r2, [r4, #0]
 8000d58:	9901      	ldr	r1, [sp, #4]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	4291      	cmp	r1, r2
 8000d5e:	d200      	bcs.n	8000d62 <HAL_RCC_ClockConfig+0x2a>
 8000d60:	e085      	b.n	8000e6e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d62:	6832      	ldr	r2, [r6, #0]
 8000d64:	4c4a      	ldr	r4, [pc, #296]	; (8000e90 <HAL_RCC_ClockConfig+0x158>)
 8000d66:	0753      	lsls	r3, r2, #29
 8000d68:	d500      	bpl.n	8000d6c <HAL_RCC_ClockConfig+0x34>
 8000d6a:	e087      	b.n	8000e7c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d6c:	0713      	lsls	r3, r2, #28
 8000d6e:	d506      	bpl.n	8000d7e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d70:	68e2      	ldr	r2, [r4, #12]
 8000d72:	6933      	ldr	r3, [r6, #16]
 8000d74:	4947      	ldr	r1, [pc, #284]	; (8000e94 <HAL_RCC_ClockConfig+0x15c>)
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	400a      	ands	r2, r1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d7e:	f7ff ff9f 	bl	8000cc0 <HAL_RCC_GetSysClockFreq>
 8000d82:	68e3      	ldr	r3, [r4, #12]
 8000d84:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <HAL_RCC_ClockConfig+0x160>)
 8000d86:	061b      	lsls	r3, r3, #24
 8000d88:	0f1b      	lsrs	r3, r3, #28
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	40d8      	lsrs	r0, r3
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_RCC_ClockConfig+0x164>)
 8000d90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fb8c 	bl	80004b0 <HAL_InitTick>
  return HAL_OK;
 8000d98:	2000      	movs	r0, #0
 8000d9a:	e00a      	b.n	8000db2 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	9901      	ldr	r1, [sp, #4]
 8000da0:	4393      	bics	r3, r2
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	4013      	ands	r3, r2
 8000daa:	9a01      	ldr	r2, [sp, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d0cc      	beq.n	8000d4a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000db0:	2001      	movs	r0, #1
}
 8000db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db4:	20f0      	movs	r0, #240	; 0xf0
 8000db6:	4936      	ldr	r1, [pc, #216]	; (8000e90 <HAL_RCC_ClockConfig+0x158>)
 8000db8:	68cb      	ldr	r3, [r1, #12]
 8000dba:	4383      	bics	r3, r0
 8000dbc:	68b0      	ldr	r0, [r6, #8]
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	60cb      	str	r3, [r1, #12]
 8000dc2:	e7c5      	b.n	8000d50 <HAL_RCC_ClockConfig+0x18>
 8000dc4:	4d32      	ldr	r5, [pc, #200]	; (8000e90 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dca:	2a02      	cmp	r2, #2
 8000dcc:	d119      	bne.n	8000e02 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	039b      	lsls	r3, r3, #14
 8000dd0:	d5ee      	bpl.n	8000db0 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	68eb      	ldr	r3, [r5, #12]
 8000dd6:	438b      	bics	r3, r1
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000ddc:	f7ff fb94 	bl	8000508 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000de2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d119      	bne.n	8000e1c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de8:	220c      	movs	r2, #12
 8000dea:	68eb      	ldr	r3, [r5, #12]
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d0b0      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000df2:	f7ff fb89 	bl	8000508 <HAL_GetTick>
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_RCC_ClockConfig+0x168>)
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d9f4      	bls.n	8000de8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8000dfe:	2003      	movs	r0, #3
 8000e00:	e7d7      	b.n	8000db2 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e02:	2a03      	cmp	r2, #3
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e06:	019b      	lsls	r3, r3, #6
 8000e08:	d4e3      	bmi.n	8000dd2 <HAL_RCC_ClockConfig+0x9a>
 8000e0a:	e7d1      	b.n	8000db0 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e0c:	2a01      	cmp	r2, #1
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	075b      	lsls	r3, r3, #29
 8000e12:	d4de      	bmi.n	8000dd2 <HAL_RCC_ClockConfig+0x9a>
 8000e14:	e7cc      	b.n	8000db0 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000e16:	059b      	lsls	r3, r3, #22
 8000e18:	d4db      	bmi.n	8000dd2 <HAL_RCC_ClockConfig+0x9a>
 8000e1a:	e7c9      	b.n	8000db0 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e20:	220c      	movs	r2, #12
 8000e22:	68eb      	ldr	r3, [r5, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d100      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xf4>
 8000e2a:	e793      	b.n	8000d54 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2c:	f7ff fb6c 	bl	8000508 <HAL_GetTick>
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_RCC_ClockConfig+0x168>)
 8000e32:	1bc0      	subs	r0, r0, r7
 8000e34:	4298      	cmp	r0, r3
 8000e36:	d9f3      	bls.n	8000e20 <HAL_RCC_ClockConfig+0xe8>
 8000e38:	e7e1      	b.n	8000dfe <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d011      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	68eb      	ldr	r3, [r5, #12]
 8000e42:	4213      	tst	r3, r2
 8000e44:	d100      	bne.n	8000e48 <HAL_RCC_ClockConfig+0x110>
 8000e46:	e785      	b.n	8000d54 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e48:	f7ff fb5e 	bl	8000508 <HAL_GetTick>
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_RCC_ClockConfig+0x168>)
 8000e4e:	1bc0      	subs	r0, r0, r7
 8000e50:	4298      	cmp	r0, r3
 8000e52:	d9f4      	bls.n	8000e3e <HAL_RCC_ClockConfig+0x106>
 8000e54:	e7d3      	b.n	8000dfe <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e56:	f7ff fb57 	bl	8000508 <HAL_GetTick>
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_RCC_ClockConfig+0x168>)
 8000e5c:	1bc0      	subs	r0, r0, r7
 8000e5e:	4298      	cmp	r0, r3
 8000e60:	d8cd      	bhi.n	8000dfe <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e62:	220c      	movs	r2, #12
 8000e64:	68eb      	ldr	r3, [r5, #12]
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d1f4      	bne.n	8000e56 <HAL_RCC_ClockConfig+0x11e>
 8000e6c:	e772      	b.n	8000d54 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	439a      	bics	r2, r3
 8000e72:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	421a      	tst	r2, r3
 8000e78:	d19a      	bne.n	8000db0 <HAL_RCC_ClockConfig+0x78>
 8000e7a:	e772      	b.n	8000d62 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e7c:	68e3      	ldr	r3, [r4, #12]
 8000e7e:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <HAL_RCC_ClockConfig+0x16c>)
 8000e80:	400b      	ands	r3, r1
 8000e82:	68f1      	ldr	r1, [r6, #12]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	60e3      	str	r3, [r4, #12]
 8000e88:	e770      	b.n	8000d6c <HAL_RCC_ClockConfig+0x34>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	40021000 	.word	0x40021000
 8000e94:	ffffc7ff 	.word	0xffffc7ff
 8000e98:	08000f14 	.word	0x08000f14
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	00001388 	.word	0x00001388
 8000ea4:	fffff8ff 	.word	0xfffff8ff

08000ea8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8000ea8:	4b01      	ldr	r3, [pc, #4]	; (8000eb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000eaa:	6818      	ldr	r0, [r3, #0]
}
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <__libc_init_array>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4d0c      	ldr	r5, [pc, #48]	; (8000eec <__libc_init_array+0x38>)
 8000eba:	4c0d      	ldr	r4, [pc, #52]	; (8000ef0 <__libc_init_array+0x3c>)
 8000ebc:	1b64      	subs	r4, r4, r5
 8000ebe:	10a4      	asrs	r4, r4, #2
 8000ec0:	42a6      	cmp	r6, r4
 8000ec2:	d109      	bne.n	8000ed8 <__libc_init_array+0x24>
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	f000 f819 	bl	8000efc <_init>
 8000eca:	4d0a      	ldr	r5, [pc, #40]	; (8000ef4 <__libc_init_array+0x40>)
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <__libc_init_array+0x44>)
 8000ece:	1b64      	subs	r4, r4, r5
 8000ed0:	10a4      	asrs	r4, r4, #2
 8000ed2:	42a6      	cmp	r6, r4
 8000ed4:	d105      	bne.n	8000ee2 <__libc_init_array+0x2e>
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	00b3      	lsls	r3, r6, #2
 8000eda:	58eb      	ldr	r3, [r5, r3]
 8000edc:	4798      	blx	r3
 8000ede:	3601      	adds	r6, #1
 8000ee0:	e7ee      	b.n	8000ec0 <__libc_init_array+0xc>
 8000ee2:	00b3      	lsls	r3, r6, #2
 8000ee4:	58eb      	ldr	r3, [r5, r3]
 8000ee6:	4798      	blx	r3
 8000ee8:	3601      	adds	r6, #1
 8000eea:	e7f2      	b.n	8000ed2 <__libc_init_array+0x1e>
 8000eec:	08000f30 	.word	0x08000f30
 8000ef0:	08000f30 	.word	0x08000f30
 8000ef4:	08000f30 	.word	0x08000f30
 8000ef8:	08000f34 	.word	0x08000f34

08000efc <_init>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f02:	bc08      	pop	{r3}
 8000f04:	469e      	mov	lr, r3
 8000f06:	4770      	bx	lr

08000f08 <_fini>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr
